{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Zoltar - The Forecast Archive \u00b6 Welcome to the documentation site for Zoltar , a system developed by the Reich Lab in the Department of Biostatistics and Epidemiology at the University of Massachusetts Amherst to store time series forecasts. Introduction \u00b6 Zoltar is a web application to that hosts a repository of model forecast results. For many existing forecasting projects, predictions made by models have been stored in differing formats and locations or in sets of unstructured data files. This complicates tracking, comparing, visualizing and scoring forecasts. Zoltar supports storing, retrieving, comparing, and analyzing time series forecasts for prediction challenges of interest to many different modeling communities. Getting started \u00b6 Use the navigation links in the sidebar to get started touring the web site , reading the user guide , or learning about our python and R packages for interacting with the Zoltar API from your programming language. Assumptions/Limitations \u00b6 The scope of this first iteration is limited in these ways: Process-agnostic : By storing only core datasets, we make no assumptions about ML processes behind a model\u2019s forecast, such as how it\u2019s fit. Enforceability : There is currently not a method in place to test whether the models were fit on the right data subsets (this is something that pipeline-focused software such as mlr3 , among others, could assist with). Unrevised vs. revised data : A Project\u2019s core dataset may or may not include data revisions, such as those used to model or forecast reporting delays. Each project should give specific instructions on what type of data (revised vs. unrevised) is used in the training and testing phases of the forecasting. Model instances : The system stores only model metadata, rather than computable representations of models (internals) that could be used to reconstruct and re-run them. Reports : Some projects generate automated narrative reports from forecast data. This system does not support storing reports with their models. Training/testing data : The only information about what subsets of the core data were used for different ML stages (e.g. training vs testing) will be stored in narrative format in the project description. Reproducibility : Since this system stores data involved in forecasts and not source code, information about how to re-run models is only captured in narrative form in the model's description, and is linked to by the model's url field. Funding \u00b6 This work has been supported by the National Institutes of General Medical Sciences (R35GM119582). The content is solely the responsibility of the authors and does not necessarily represent the official views of NIGMS, or the National Institutes of Health. Contact \u00b6 Email : If you have questions about this site, please contact us at zoltar@reichlab.io . Account requests : Please fill out the Zoltardata.com user request form to be added to our beta-tester invitation queue. Zoltar users email list : We have set up an email group at https://groups.io/g/zoltardata where Zoltar developers will make occasional announcements about important system changes, releases, etc. To subscribe either create a groups.io account and then add this group, or just send an email to zoltardata+subscribe@groups.io to auto-create an account. GitHub repository issues : Zoltar is under active development, so you may have questions, encounter issues, or want new features. Please feel free to create issues for us at https://github.com/reichlab/forecast-repository/issues .","title":"Home"},{"location":"#zoltar-the-forecast-archive","text":"Welcome to the documentation site for Zoltar , a system developed by the Reich Lab in the Department of Biostatistics and Epidemiology at the University of Massachusetts Amherst to store time series forecasts.","title":"Zoltar - The Forecast Archive"},{"location":"#introduction","text":"Zoltar is a web application to that hosts a repository of model forecast results. For many existing forecasting projects, predictions made by models have been stored in differing formats and locations or in sets of unstructured data files. This complicates tracking, comparing, visualizing and scoring forecasts. Zoltar supports storing, retrieving, comparing, and analyzing time series forecasts for prediction challenges of interest to many different modeling communities.","title":"Introduction"},{"location":"#getting-started","text":"Use the navigation links in the sidebar to get started touring the web site , reading the user guide , or learning about our python and R packages for interacting with the Zoltar API from your programming language.","title":"Getting started"},{"location":"#assumptionslimitations","text":"The scope of this first iteration is limited in these ways: Process-agnostic : By storing only core datasets, we make no assumptions about ML processes behind a model\u2019s forecast, such as how it\u2019s fit. Enforceability : There is currently not a method in place to test whether the models were fit on the right data subsets (this is something that pipeline-focused software such as mlr3 , among others, could assist with). Unrevised vs. revised data : A Project\u2019s core dataset may or may not include data revisions, such as those used to model or forecast reporting delays. Each project should give specific instructions on what type of data (revised vs. unrevised) is used in the training and testing phases of the forecasting. Model instances : The system stores only model metadata, rather than computable representations of models (internals) that could be used to reconstruct and re-run them. Reports : Some projects generate automated narrative reports from forecast data. This system does not support storing reports with their models. Training/testing data : The only information about what subsets of the core data were used for different ML stages (e.g. training vs testing) will be stored in narrative format in the project description. Reproducibility : Since this system stores data involved in forecasts and not source code, information about how to re-run models is only captured in narrative form in the model's description, and is linked to by the model's url field.","title":"Assumptions/Limitations"},{"location":"#funding","text":"This work has been supported by the National Institutes of General Medical Sciences (R35GM119582). The content is solely the responsibility of the authors and does not necessarily represent the official views of NIGMS, or the National Institutes of Health.","title":"Funding"},{"location":"#contact","text":"Email : If you have questions about this site, please contact us at zoltar@reichlab.io . Account requests : Please fill out the Zoltardata.com user request form to be added to our beta-tester invitation queue. Zoltar users email list : We have set up an email group at https://groups.io/g/zoltardata where Zoltar developers will make occasional announcements about important system changes, releases, etc. To subscribe either create a groups.io account and then add this group, or just send an email to zoltardata+subscribe@groups.io to auto-create an account. GitHub repository issues : Zoltar is under active development, so you may have questions, encounter issues, or want new features. Please feel free to create issues for us at https://github.com/reichlab/forecast-repository/issues .","title":"Contact"},{"location":"Accounts/","text":"Managing your account \u00b6 Zoltar provides some basic features for managing your account, which this page describes. Note that you must have a Zoltar account to do anything other than browse public repositories. If you want an account or need to delete one, please use the contact information . View your profile page \u00b6 Account features are accessed via the user drop down menu in the black navigation header that's shown at the top of all pages: Selecting \"Profile Page\" takes you to details about your account: From this page you can use the buttons at the top to edit your email address and name, and to change your password. In addition, you'll see sections for the Projects you're involved with (either as a project owner or model owner), the Models you own, and the Jobs you have created. Reset your password \u00b6 Zoltar has a basic \"amnesia\" feature in case you forget your password. To use it: Click the \"Sign in\" user drop down menu in the black navigation header that's shown at the top of all pages. On the user login page, click the \"Lost password?\" link. Follow the instructions that are sent to the email address you registered with Zoltar.","title":"Accounts"},{"location":"Accounts/#managing-your-account","text":"Zoltar provides some basic features for managing your account, which this page describes. Note that you must have a Zoltar account to do anything other than browse public repositories. If you want an account or need to delete one, please use the contact information .","title":"Managing your account"},{"location":"Accounts/#view-your-profile-page","text":"Account features are accessed via the user drop down menu in the black navigation header that's shown at the top of all pages: Selecting \"Profile Page\" takes you to details about your account: From this page you can use the buttons at the top to edit your email address and name, and to change your password. In addition, you'll see sections for the Projects you're involved with (either as a project owner or model owner), the Models you own, and the Jobs you have created.","title":"View your profile page"},{"location":"Accounts/#reset-your-password","text":"Zoltar has a basic \"amnesia\" feature in case you forget your password. To use it: Click the \"Sign in\" user drop down menu in the black navigation header that's shown at the top of all pages. On the user login page, click the \"Lost password?\" link. Follow the instructions that are sent to the email address you registered with Zoltar.","title":"Reset your password"},{"location":"Api/","text":"API \u00b6 Zoltar's functionality is accessible via the following RESTful endpoints. All results are JSON. The API is browsable from the root URI on the home page (look for API buttons on any page), and is a great starting point for developers. Note that all projects and users are listed on the home page, but private projects, their models, and their forecasts, can only be accessed by authorized accounts.","title":"RESTful API"},{"location":"Api/#api","text":"Zoltar's functionality is accessible via the following RESTful endpoints. All results are JSON. The API is browsable from the root URI on the home page (look for API buttons on any page), and is a great starting point for developers. Note that all projects and users are listed on the home page, but private projects, their models, and their forecasts, can only be accessed by authorized accounts.","title":"API"},{"location":"ApiIntro/","text":"Programming libraries and API \u00b6 You can do many of the operations available in the zoltardata.com web interface via the Zoltar RESTful API . While accessing the API directly is possible (say via curl , HTTPie , etc), we have written two language bindings to simplify use from Python and R . Follow those links to learn more.","title":"Introduction"},{"location":"ApiIntro/#programming-libraries-and-api","text":"You can do many of the operations available in the zoltardata.com web interface via the Zoltar RESTful API . While accessing the API directly is possible (say via curl , HTTPie , etc), we have written two language bindings to simplify use from Python and R . Follow those links to learn more.","title":"Programming libraries and API"},{"location":"Concepts/","text":"Zoltar concepts \u00b6 On this page we explain the fundamental ideas behind Zoltar's envisioning of representing forecasts in a challenge. Projects : As mentioned in Manging Projects , projects are the central organizing concept in Zoltar. They define the units , targets and time zeros that forecasts are relative to, and contain the forecast models that teams use to represent a forecasting challenge. Forecast models : A model is the representation of code that generates forecasts. It has zero or one forecasts associated with the project's time zeros . Forecasts : A forecast consists of a set of predictions of the various types supported by Zoltar. Forecast versioning is supported via each forecast having an issued_at field, which defaults to when the forecast was uploaded to Zoltar. (Users with advanced permission can change that field.) See the Data Model and Forecast Versions pages for details. Units : Units represent distinct entities for which predictions are made, for example, if forecasts are made for multiple different locations, the locations are the units. Targets : Targets are the fundamental data structure of a forecast, and as such have a separate page documenting them. Time zeros : Because the forecasting field does not have standard terminology, we have settled on the following two concepts for this application. Note that some time zeros are tagged as starting a season, specifying the season's name, which helps to segment the time zeros. Time zero : The date from which a forecast originates and to which targets are relative (i.e. a \"2-week-ahead forecast\" is two weeks ahead of the time-zero). Every forecast is for a time zero. Data version date : (Optional) The latest date at which any data source used for the forecasts should be considered. Can be used externally to recreate model results by \"rolling back\" the core data to a particular state. Truth : Zoltar supports uploading ground truth data for projects. Please see this page for details.","title":"Concepts"},{"location":"Concepts/#zoltar-concepts","text":"On this page we explain the fundamental ideas behind Zoltar's envisioning of representing forecasts in a challenge. Projects : As mentioned in Manging Projects , projects are the central organizing concept in Zoltar. They define the units , targets and time zeros that forecasts are relative to, and contain the forecast models that teams use to represent a forecasting challenge. Forecast models : A model is the representation of code that generates forecasts. It has zero or one forecasts associated with the project's time zeros . Forecasts : A forecast consists of a set of predictions of the various types supported by Zoltar. Forecast versioning is supported via each forecast having an issued_at field, which defaults to when the forecast was uploaded to Zoltar. (Users with advanced permission can change that field.) See the Data Model and Forecast Versions pages for details. Units : Units represent distinct entities for which predictions are made, for example, if forecasts are made for multiple different locations, the locations are the units. Targets : Targets are the fundamental data structure of a forecast, and as such have a separate page documenting them. Time zeros : Because the forecasting field does not have standard terminology, we have settled on the following two concepts for this application. Note that some time zeros are tagged as starting a season, specifying the season's name, which helps to segment the time zeros. Time zero : The date from which a forecast originates and to which targets are relative (i.e. a \"2-week-ahead forecast\" is two weeks ahead of the time-zero). Every forecast is for a time zero. Data version date : (Optional) The latest date at which any data source used for the forecasts should be considered. Can be used externally to recreate model results by \"rolling back\" the core data to a particular state. Truth : Zoltar supports uploading ground truth data for projects. Please see this page for details.","title":"Zoltar concepts"},{"location":"DataModel/","text":"Zoltar data model \u00b6 This page documents how Zoltar represents forecast data, and the various types of predictions that are supported. Each forecast is made for a particular time zero in the project, and contains some number of predictions , one or more for each combination of the project's units and targets . Zoltar supports the following five prediction types, which we've found covers many forecasting applications. All predictions must pass a number of validity checks as documented in Validation . Each section has an example as represented in Zoltar's JSON format which was taken from the \"Docs Example Project\" demo project. Overview \u00b6 (Please refer to the diagram below.) A forecast is made up of metadata (the model that made the forecast, the time zero for the forecast, and the forecast's date of submission) plus the forecast's data as a set of predictions . Each prediction is a collection of one or more prediction elements specific to one target and unit. Each prediction element is of a particular type (point, named, bin, sample, and quantile, as described below). Point predictions \u00b6 Point predictions represent a single value. See here for details. In this example we see a prediction of 2.1 for the unit \"location1\" and target \"pct next week\". Note that, like all predictions, the data type (in this case the float 2.1 ) must match the target's data type. (In this case it does; \"pct next week\" is a discrete target.) {\"unit\": \"location1\", \"target\": \"pct next week\", \"class\": \"point\", \"prediction\": { \"value\": 2.1 } } Named distributions \u00b6 Named distributions represent distributions like normal , log normal , gamma , etc. See here for details. Here is an example in which a normal distribution (\"norm\" is the abbreviation) is specified for unit \"location1\" and target \"pct next week\". Named predictions support up to three parameters (named \"param1\", \"param2\", and \"param3\") depending on the family. Here the normal distribution requires two parameters: mean (\"param1\") and sd (\"param2\"). \"param3\" is unused and not listed. {\"unit\": \"location1\", \"target\": \"pct next week\", \"class\": \"named\", \"prediction\": { \"family\": \"norm\", \"param1\": 1.1, \"param2\": 2.2 } } Bin distributions \u00b6 Bin distributions represent binned distribution defined by inclusive lower bounds for each bin. See here for details. Example: {\"unit\": \"location2\", \"target\": \"pct next week\", \"class\": \"bin\", \"prediction\": { \"cat\": [1.1, 2.2, 3.3], \"prob\": [0.3, 0.2, 0.5] } } Sample distributions \u00b6 Sample distributions represent samples taken for the unit and target. Here's an example: {\"unit\": \"location3\", \"target\": \"pct next week\", \"class\": \"sample\", \"prediction\": { \"sample\": [2.3, 6.5, 0.0, 10.0234, 0.0001] } } Quantile distributions \u00b6 Quantile distributions represent quantiles of the predictive distribution. For example: {\"unit\": \"location2\", \"target\": \"pct next week\", \"class\": \"quantile\", \"prediction\": { \"quantile\": [0.025, 0.25, 0.5, 0.75, 0.975], \"value\": [1.0, 2.2, 2.2, 5.0, 50.0] } }","title":"Data model"},{"location":"DataModel/#zoltar-data-model","text":"This page documents how Zoltar represents forecast data, and the various types of predictions that are supported. Each forecast is made for a particular time zero in the project, and contains some number of predictions , one or more for each combination of the project's units and targets . Zoltar supports the following five prediction types, which we've found covers many forecasting applications. All predictions must pass a number of validity checks as documented in Validation . Each section has an example as represented in Zoltar's JSON format which was taken from the \"Docs Example Project\" demo project.","title":"Zoltar data model"},{"location":"DataModel/#overview","text":"(Please refer to the diagram below.) A forecast is made up of metadata (the model that made the forecast, the time zero for the forecast, and the forecast's date of submission) plus the forecast's data as a set of predictions . Each prediction is a collection of one or more prediction elements specific to one target and unit. Each prediction element is of a particular type (point, named, bin, sample, and quantile, as described below).","title":"Overview"},{"location":"DataModel/#point-predictions","text":"Point predictions represent a single value. See here for details. In this example we see a prediction of 2.1 for the unit \"location1\" and target \"pct next week\". Note that, like all predictions, the data type (in this case the float 2.1 ) must match the target's data type. (In this case it does; \"pct next week\" is a discrete target.) {\"unit\": \"location1\", \"target\": \"pct next week\", \"class\": \"point\", \"prediction\": { \"value\": 2.1 } }","title":"Point predictions"},{"location":"DataModel/#named-distributions","text":"Named distributions represent distributions like normal , log normal , gamma , etc. See here for details. Here is an example in which a normal distribution (\"norm\" is the abbreviation) is specified for unit \"location1\" and target \"pct next week\". Named predictions support up to three parameters (named \"param1\", \"param2\", and \"param3\") depending on the family. Here the normal distribution requires two parameters: mean (\"param1\") and sd (\"param2\"). \"param3\" is unused and not listed. {\"unit\": \"location1\", \"target\": \"pct next week\", \"class\": \"named\", \"prediction\": { \"family\": \"norm\", \"param1\": 1.1, \"param2\": 2.2 } }","title":"Named distributions"},{"location":"DataModel/#bin-distributions","text":"Bin distributions represent binned distribution defined by inclusive lower bounds for each bin. See here for details. Example: {\"unit\": \"location2\", \"target\": \"pct next week\", \"class\": \"bin\", \"prediction\": { \"cat\": [1.1, 2.2, 3.3], \"prob\": [0.3, 0.2, 0.5] } }","title":"Bin distributions"},{"location":"DataModel/#sample-distributions","text":"Sample distributions represent samples taken for the unit and target. Here's an example: {\"unit\": \"location3\", \"target\": \"pct next week\", \"class\": \"sample\", \"prediction\": { \"sample\": [2.3, 6.5, 0.0, 10.0234, 0.0001] } }","title":"Sample distributions"},{"location":"DataModel/#quantile-distributions","text":"Quantile distributions represent quantiles of the predictive distribution. For example: {\"unit\": \"location2\", \"target\": \"pct next week\", \"class\": \"quantile\", \"prediction\": { \"quantile\": [0.025, 0.25, 0.5, 0.75, 0.975], \"value\": [1.0, 2.2, 2.2, 5.0, 50.0] } }","title":"Quantile distributions"},{"location":"FileFormats/","text":"File Formats \u00b6 Zoltar uses a number of formats for representing truth data, forecast data, configurations, etc. This page documents those. Project creation configuration (JSON) Truth data format (CSV) Forecast data format (JSON) Forecast data format (CSV) Quantile forecast format (CSV) Project creation configuration (JSON) \u00b6 As documented in Projects , as an alternative to manually creating a project via the web interface, projects can be created from a JSON configuration file. Here's the configuration file from the \"Docs Example Project\" demo project: zoltar-project-config.json . Project configuration files contain eight metadata keys ( \"name , \"is_public\" , \"description\" , \"home_url\" , \"logo_url\" , \"core_data\" , \"time_interval_type\" , \"visualization_y_label\" ), plus three keys that are lists of objects ( \"units\" , \"targets\" , and \"timezeros\" ). The metadata values' meanings are self-evident except for these two: time_interval_type : Used by the D3 component to label the X axis, is either Week , Biweek , or Month visualization_y_label : \"\" Y axis, can be any text Here are the three list objects' formats: \"units\" : a list of objects containing only one field: name : The name of the unit. \"targets\" : a list of the project's targets. Please see the Targets.md file for a detailed description of target parameters and which are required. Here are all possible parameters that can be passed in a project configuration file: name : string description : string type : string - must be one of the following: continuous , discrete , nominal , binary , or date is_step_ahead : boolean step_ahead_increment : integer - negative, zero, or positive unit : string range : an array (list) of two numbers cats : an array (list) of one or more numbers or strings (which depends on the target's type's data type) dates : an array (list) of one or more strings in the YYYY-MM-DD format \"timezeros\" : a list of the projects time zeros. Each has these fields: timezero_date : The timezero's date in yyyymmdd format data_version_date : Optional data version date in the same format. Pass null if the timezero does not have one is_season_start : true if this starts a season, and false otherwise season_name : Applicable when is_season_start is true , names the season, e.g., \"2010-2011\" Truth data format (CSV) \u00b6 Every project in Zoltar can have ground truth values associated with targets. Users can access them as CSV as described in Truth . An example truths file is zoltar-ground-truth-example.csv . The file has four columns: timezero , unit , target , value : timezero : date the truth applies to, formatted as yyyy-mm-dd unit : the unit's name target : target name value : truth value, formatted according to the target's type. date values are formatted yyyy-mm-dd and booleans as true or false Forecast data format (JSON) \u00b6 For prediction input and output we use a JSON file format. This format is strongly inspired by https://github.com/cdcepi/predx/blob/master/predx_classes.md . See zoltar-predictions-examples.json for an example. The file contains a top-level object with two keys: \"meta\" and \"predictions\" . The meta section is unused for uploads, and for downloads contains various information about the forecast in the repository in the \"forecast\" field) plus lists of the project's \"units\" and \"targets\" . The \"predictions\" list contains objects for each prediction, and each object contains the following four keys: \"location\" : name of the Location. \"target\" : name of the Target. \"class\" : the type of prediction this is. It is an abbreviation of the corresponding Prediction subclass - the names are : bin , named , point , and sample . \"prediction\" : a class-specific object containing the prediction data itself. The format varies according to class. Here is a summary (see Data model for details and examples): \"bin\" : Binned distribution with a category for each bin. It is a two-column table represented by two keys, one per column: cat and prob . They are paired, i.e., have the same number of rows. \"named\" : A named distribution with four fields: family and param1 through param3 . family names must be one of : norm , lnorm , gamma , beta , bern , binom , pois , nbinom , and nbinom2 . \"point : A numeric point prediction with a single value key. \"sample\" : Numeric samples represented as a table with one column that is found in the sample key. \"quantile\" : A quantile distribution with two paired columns: quantile and value . Forecast data format (CSV) \u00b6 Because the native Zoltar JSON format can be inconvenient to work with, the Zoltar libraries provide functions to convert from JSON to a Zoltar-specific CSV format with the following columns. Each row represents a prediction of a particular type as described on the data model page . Note that because different prediction types have different contents, the frame is 'sparse': not every row uses all columns, and unused ones are empty ( \"\" ). However, the first three columns ( unit , target , and class ) are always non-empty. unit : the prediction's unit target : \"\" target class : \"\" prediction type. one of bin , named , point , sample , and quantile value : used for point and quantile prediction types. empty otherwise cat : used for bin prediction types. empty otherwise prob : \"\" sample : used for sample prediction types. empty otherwise quantile : used for quantile prediction types. empty otherwise family : family name for named predictions. see Named Prediction Elements for a list of them param1 : parameter \"\" param2 : parameter \"\" param3 : parameter \"\" Quantile forecast format (CSV) \u00b6 Zoltar libraries support importing quantile data (see Validation.md for more information) via the COVID-19 CSV format documented at covid19-forecast-hub . While this format is not a native Zoltar data format, the libraries translate between the formats. This allows users to provide CSVs that can be translated into JSON and uploaded into Zoltar. Columns: The Zoltar libraries ignore all but the following, which are allowed to be in any order: \"target\" : a unique id for the target \"location\" : a unique id for the location (we have standardized to FIPS codes ). It is translated to Zoltar's \"unit\" concept. \"type\" : one of either \"point\" or \"quantile\" \"quantile\" : a value between 0 and 1 (inclusive), stating which quantile is displayed in this row. if type==\"point\" then NA. \"value\" : a numeric value representing the value of the quantile function evaluated at the probability specified in quantile See quantile-predictions.csv for an example. Retracted predictions \u00b6 As mentioned in Retracted predictions , Zoltar supports retracting individual prediction elements ( timezero/unit/target combinations). These are indicated in quantile CSV files by NULL point and quantile values (no quote marks): To retract a point prediction, use NULL for the point value. To retract a quantile prediction, use NULL for all values. All quantiles must still be valid , and all values must be NULL . That is, no partial NULL s are allowed. The quantiles themselves must still be valid. You can mix retractions and updated/add prediction elements in a single file. Here's a partial example from COVID-19 Forecast Hub that contains two prediction elements - a non-retracted point and a retracted quantile: forecast_date,target,target_end_date,location,type,quantile,value 2020-07-04,1 day ahead inc hosp,2020-07-05,US,point,NA,3020 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.01,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.025,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.05,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.1,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.15,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.2,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.25,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.3,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.35,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.4,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.45,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.5,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.55,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.6,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.65,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.7,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.75,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.8,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.85,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.9,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.95,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.975,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.99,NULL","title":"File Formats"},{"location":"FileFormats/#file-formats","text":"Zoltar uses a number of formats for representing truth data, forecast data, configurations, etc. This page documents those. Project creation configuration (JSON) Truth data format (CSV) Forecast data format (JSON) Forecast data format (CSV) Quantile forecast format (CSV)","title":"File Formats"},{"location":"FileFormats/#project-creation-configuration-json","text":"As documented in Projects , as an alternative to manually creating a project via the web interface, projects can be created from a JSON configuration file. Here's the configuration file from the \"Docs Example Project\" demo project: zoltar-project-config.json . Project configuration files contain eight metadata keys ( \"name , \"is_public\" , \"description\" , \"home_url\" , \"logo_url\" , \"core_data\" , \"time_interval_type\" , \"visualization_y_label\" ), plus three keys that are lists of objects ( \"units\" , \"targets\" , and \"timezeros\" ). The metadata values' meanings are self-evident except for these two: time_interval_type : Used by the D3 component to label the X axis, is either Week , Biweek , or Month visualization_y_label : \"\" Y axis, can be any text Here are the three list objects' formats: \"units\" : a list of objects containing only one field: name : The name of the unit. \"targets\" : a list of the project's targets. Please see the Targets.md file for a detailed description of target parameters and which are required. Here are all possible parameters that can be passed in a project configuration file: name : string description : string type : string - must be one of the following: continuous , discrete , nominal , binary , or date is_step_ahead : boolean step_ahead_increment : integer - negative, zero, or positive unit : string range : an array (list) of two numbers cats : an array (list) of one or more numbers or strings (which depends on the target's type's data type) dates : an array (list) of one or more strings in the YYYY-MM-DD format \"timezeros\" : a list of the projects time zeros. Each has these fields: timezero_date : The timezero's date in yyyymmdd format data_version_date : Optional data version date in the same format. Pass null if the timezero does not have one is_season_start : true if this starts a season, and false otherwise season_name : Applicable when is_season_start is true , names the season, e.g., \"2010-2011\"","title":"Project creation configuration (JSON)"},{"location":"FileFormats/#truth-data-format-csv","text":"Every project in Zoltar can have ground truth values associated with targets. Users can access them as CSV as described in Truth . An example truths file is zoltar-ground-truth-example.csv . The file has four columns: timezero , unit , target , value : timezero : date the truth applies to, formatted as yyyy-mm-dd unit : the unit's name target : target name value : truth value, formatted according to the target's type. date values are formatted yyyy-mm-dd and booleans as true or false","title":"Truth data format (CSV)"},{"location":"FileFormats/#forecast-data-format-json","text":"For prediction input and output we use a JSON file format. This format is strongly inspired by https://github.com/cdcepi/predx/blob/master/predx_classes.md . See zoltar-predictions-examples.json for an example. The file contains a top-level object with two keys: \"meta\" and \"predictions\" . The meta section is unused for uploads, and for downloads contains various information about the forecast in the repository in the \"forecast\" field) plus lists of the project's \"units\" and \"targets\" . The \"predictions\" list contains objects for each prediction, and each object contains the following four keys: \"location\" : name of the Location. \"target\" : name of the Target. \"class\" : the type of prediction this is. It is an abbreviation of the corresponding Prediction subclass - the names are : bin , named , point , and sample . \"prediction\" : a class-specific object containing the prediction data itself. The format varies according to class. Here is a summary (see Data model for details and examples): \"bin\" : Binned distribution with a category for each bin. It is a two-column table represented by two keys, one per column: cat and prob . They are paired, i.e., have the same number of rows. \"named\" : A named distribution with four fields: family and param1 through param3 . family names must be one of : norm , lnorm , gamma , beta , bern , binom , pois , nbinom , and nbinom2 . \"point : A numeric point prediction with a single value key. \"sample\" : Numeric samples represented as a table with one column that is found in the sample key. \"quantile\" : A quantile distribution with two paired columns: quantile and value .","title":"Forecast data format (JSON)"},{"location":"FileFormats/#forecast-data-format-csv","text":"Because the native Zoltar JSON format can be inconvenient to work with, the Zoltar libraries provide functions to convert from JSON to a Zoltar-specific CSV format with the following columns. Each row represents a prediction of a particular type as described on the data model page . Note that because different prediction types have different contents, the frame is 'sparse': not every row uses all columns, and unused ones are empty ( \"\" ). However, the first three columns ( unit , target , and class ) are always non-empty. unit : the prediction's unit target : \"\" target class : \"\" prediction type. one of bin , named , point , sample , and quantile value : used for point and quantile prediction types. empty otherwise cat : used for bin prediction types. empty otherwise prob : \"\" sample : used for sample prediction types. empty otherwise quantile : used for quantile prediction types. empty otherwise family : family name for named predictions. see Named Prediction Elements for a list of them param1 : parameter \"\" param2 : parameter \"\" param3 : parameter \"\"","title":"Forecast data format (CSV)"},{"location":"FileFormats/#quantile-forecast-format-csv","text":"Zoltar libraries support importing quantile data (see Validation.md for more information) via the COVID-19 CSV format documented at covid19-forecast-hub . While this format is not a native Zoltar data format, the libraries translate between the formats. This allows users to provide CSVs that can be translated into JSON and uploaded into Zoltar. Columns: The Zoltar libraries ignore all but the following, which are allowed to be in any order: \"target\" : a unique id for the target \"location\" : a unique id for the location (we have standardized to FIPS codes ). It is translated to Zoltar's \"unit\" concept. \"type\" : one of either \"point\" or \"quantile\" \"quantile\" : a value between 0 and 1 (inclusive), stating which quantile is displayed in this row. if type==\"point\" then NA. \"value\" : a numeric value representing the value of the quantile function evaluated at the probability specified in quantile See quantile-predictions.csv for an example.","title":"Quantile forecast format (CSV)"},{"location":"FileFormats/#retracted-predictions","text":"As mentioned in Retracted predictions , Zoltar supports retracting individual prediction elements ( timezero/unit/target combinations). These are indicated in quantile CSV files by NULL point and quantile values (no quote marks): To retract a point prediction, use NULL for the point value. To retract a quantile prediction, use NULL for all values. All quantiles must still be valid , and all values must be NULL . That is, no partial NULL s are allowed. The quantiles themselves must still be valid. You can mix retractions and updated/add prediction elements in a single file. Here's a partial example from COVID-19 Forecast Hub that contains two prediction elements - a non-retracted point and a retracted quantile: forecast_date,target,target_end_date,location,type,quantile,value 2020-07-04,1 day ahead inc hosp,2020-07-05,US,point,NA,3020 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.01,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.025,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.05,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.1,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.15,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.2,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.25,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.3,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.35,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.4,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.45,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.5,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.55,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.6,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.65,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.7,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.75,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.8,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.85,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.9,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.95,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.975,NULL 2020-07-04,1 day ahead inc hosp,2020-07-05,US,quantile,0.99,NULL","title":"Retracted predictions"},{"location":"ForecastDetailPage/","text":"Forecast detail page \u00b6 The forecast detail page shows information about a particular forecast, and is divided into five vertical sections with bold headings, described next: Details table , Units present , Targets present , Predictions present , and Query form and results . Here's an example forecast detail page: Forecast details table \u00b6 At the top of the page is a table showing information related to the forecast: Model : A link to the owning model . Timezero : The time zero that the forecast applies to. (The data version date, if any, is not shown here.) See Concepts for more about time zeros. Issued at : The datetime identifying the forecast's version . If there is more than one version for this forecast's timezero then text like \"Version 1 of 2\" will show. (See Concepts for more about versions.) Data Source : Text describing where the forecast came from. It can be anything but is typically a data file name, such as a CSV. The source is a link to the forecast's forecast detail page . It says \"(No data)\" if a forecast has not yet been uploaded for that time zero. Upload time : The date and time that the forecast was uploaded to Zoltar. Notes : Text describing anything slightly different about a given forecast, e.g., a changed set of assumptions or a comment about when the forecast was created. Notes should be brief, typically less than 50 words. Units present \u00b6 This section is the same as on the project detail page , but lists only those units for which this forecast predicts. Targets present \u00b6 This section is the same as in project detail page , but lists only those targets for which this forecast predicts. Predictions present \u00b6 The predictions section has the heading \"Predictions (_)\" (where _ is the actual number of predictions) and a bulleted summary of the counts of the five different prediction types that can be associated with a forecast: bin , named , point , quantile , and sample . See Data Model for more information on how forecast data is modeled. Query form and results \u00b6 At the bottom of the page under Query Forecast Data is a simple form that allows searching the forecast's predictions by unit and target. (Those two dropdown menus contain the units and targets that have predictions, but there's no guarantee that every combination has data.) Clicking Search runs the query and shows the results below the form. There is a table for each type of prediction that's present ( bin , named , etc.) and each table's columns are customized according to the prediction type (all tables have Unit and Target columns): bin : Prob and Cat columns named : Family , Param 1 , Param 2 , and Param 3 columns point : a Value column quantile : Quantile and Value columns sample : a Sample column Here's an example (the page has been scrolled down) under Found predictions :","title":"Forecast detail page"},{"location":"ForecastDetailPage/#forecast-detail-page","text":"The forecast detail page shows information about a particular forecast, and is divided into five vertical sections with bold headings, described next: Details table , Units present , Targets present , Predictions present , and Query form and results . Here's an example forecast detail page:","title":"Forecast detail page"},{"location":"ForecastDetailPage/#forecast-details-table","text":"At the top of the page is a table showing information related to the forecast: Model : A link to the owning model . Timezero : The time zero that the forecast applies to. (The data version date, if any, is not shown here.) See Concepts for more about time zeros. Issued at : The datetime identifying the forecast's version . If there is more than one version for this forecast's timezero then text like \"Version 1 of 2\" will show. (See Concepts for more about versions.) Data Source : Text describing where the forecast came from. It can be anything but is typically a data file name, such as a CSV. The source is a link to the forecast's forecast detail page . It says \"(No data)\" if a forecast has not yet been uploaded for that time zero. Upload time : The date and time that the forecast was uploaded to Zoltar. Notes : Text describing anything slightly different about a given forecast, e.g., a changed set of assumptions or a comment about when the forecast was created. Notes should be brief, typically less than 50 words.","title":"Forecast details table"},{"location":"ForecastDetailPage/#units-present","text":"This section is the same as on the project detail page , but lists only those units for which this forecast predicts.","title":"Units present"},{"location":"ForecastDetailPage/#targets-present","text":"This section is the same as in project detail page , but lists only those targets for which this forecast predicts.","title":"Targets present"},{"location":"ForecastDetailPage/#predictions-present","text":"The predictions section has the heading \"Predictions (_)\" (where _ is the actual number of predictions) and a bulleted summary of the counts of the five different prediction types that can be associated with a forecast: bin , named , point , quantile , and sample . See Data Model for more information on how forecast data is modeled.","title":"Predictions present"},{"location":"ForecastDetailPage/#query-form-and-results","text":"At the bottom of the page under Query Forecast Data is a simple form that allows searching the forecast's predictions by unit and target. (Those two dropdown menus contain the units and targets that have predictions, but there's no guarantee that every combination has data.) Clicking Search runs the query and shows the results below the form. There is a table for each type of prediction that's present ( bin , named , etc.) and each table's columns are customized according to the prediction type (all tables have Unit and Target columns): bin : Prob and Cat columns named : Family , Param 1 , Param 2 , and Param 3 columns point : a Value column quantile : Quantile and Value columns sample : a Sample column Here's an example (the page has been scrolled down) under Found predictions :","title":"Query form and results"},{"location":"ForecastQueryFormat/","text":"Querying a project's forecasts \u00b6 In addition to the ability to download individual forecasts via both the web UI and the Zoltar libraries , Zoltar supports downloading data from multiple forecasts via a simple query specification. You can download from the web UI as described in Download forecasts via the web UI or through the API. Querying workflow \u00b6 Like uploading a forecast , querying a project's forecasts can be a long operation. For this reason, Zoltar enqueues queries as jobs that are operated on separately from the web process. This means querying follows these steps: Create and submit the query . This returns a job that you can use to a) track the status of the query, and b) download the query results (forecast data). Poll the job until its status is SUCCESS . (You can use the web UI to do this as well. See Check an upload's status for how.) Download the data associated with the job. Query format \u00b6 Zoltar supports a simple filtering feature that allows users to limit what data is downloaded. To filter a project's forecast data, we support the following six types of filters. They are passed behind the scenes to the server as JSON. Logically, the filters are treated as a list of \"ANDs of ORs\": Each of the five filter types are lists that are considered individually as ORs. For example, a list of models means get data from any of them. The filters are combined by ANDs, meaning only data that matches all filters. (See the below example.) The types of filters are: 1) Filter by model : Pass zero or more model abbreviations in the models field. Example: {\"models\": [\"60-contact\", \"CovidIL_100\"]} # gets data only from either of these two models 2) Filter by unit : Pass zero or more unit names in the units field. Example: {\"units\": [\"US\"]} # get data only for this unit 3) Filter by target : Pass zero or more target names in the targets field. Example: {\"targets\": [\"0 day ahead cum death\", \"1 day ahead cum death\"]} # get data only for either of these two targets 4) Filter by timezero : Pass zero or more timezero dates in yyyy-mm-dd format in the timezeros field. Example: {\"timezeros\": [\"2020-05-14\", \"2020-05-09\"]} # get data only for either of these two time zeros 5) Filter by forecast type : Pass a list of string types in the types field. Choices are bin , named , point , sample , and quantile . Example: {\"types\": [\"point\", \"quantile\"]} # get only point and quantile data 6) Filter by forecast version : Passing a datetime string in the optional as_of field causes the query to return only those forecast versions whose issued_at is <= the as_of datetime (AKA timestamp). If no as_of is passed then the query returns the most recent forecasts. (See Forecast Versions for more about versions.) The as_of field format must be a datetime as parsed by the dateutil python library , which accepts a variety of styles. You can find example here . Importantly, the datetime must include timezone information for disambiguation, without which the query will fail. (Note that Zoltar displays all datetimes using the UTC timezone.) Here's an example: {\"as_of\": \"2021-05-10 12:00 UTC \"} # get forecasts whose issued_at is <= this date The lists in 1 through 5 operate as \"OR\" on their own but are combined in the final query as \"AND\"s. Here's an example: {\"models\": [\"60-contact\", \"CovidIL_100\"], \"units\": [\"US\"], \"targets\": [\"0 day ahead cum death\", \"1 day ahead cum death\"], \"timezeros\": [\"2020-05-14\", \"2020-05-09\"], \"types\": [\"point\", \"quantile\"] } This results in data that is: (from either the 60-contact OR CovidIL_100 models) AND (the unit is US ) AND (the target is either 0 day ahead cum death or 1 day ahead cum death ) AND (the timezero is either 2020-05-14 OR 2020-05-09 ) AND (the prediction type is either point OR quantile ) Note that not all types of filters are required to be specified. Any missing ones are treated by default as \"all\". In the previous example, if we omitted types then we'd get similar data except it would include all prediction types instead of just point or quantile ones. Data format \u00b6 The forecasts are returned in the CSV format documented at Forecast data format (CSV) . Data limits \u00b6 Because queries have the potential to return millions of rows, the number of resulting rows is capped. The query fails if it would exceed the limit.","title":"Forecast Query Format"},{"location":"ForecastQueryFormat/#querying-a-projects-forecasts","text":"In addition to the ability to download individual forecasts via both the web UI and the Zoltar libraries , Zoltar supports downloading data from multiple forecasts via a simple query specification. You can download from the web UI as described in Download forecasts via the web UI or through the API.","title":"Querying a project's forecasts"},{"location":"ForecastQueryFormat/#querying-workflow","text":"Like uploading a forecast , querying a project's forecasts can be a long operation. For this reason, Zoltar enqueues queries as jobs that are operated on separately from the web process. This means querying follows these steps: Create and submit the query . This returns a job that you can use to a) track the status of the query, and b) download the query results (forecast data). Poll the job until its status is SUCCESS . (You can use the web UI to do this as well. See Check an upload's status for how.) Download the data associated with the job.","title":"Querying workflow"},{"location":"ForecastQueryFormat/#query-format","text":"Zoltar supports a simple filtering feature that allows users to limit what data is downloaded. To filter a project's forecast data, we support the following six types of filters. They are passed behind the scenes to the server as JSON. Logically, the filters are treated as a list of \"ANDs of ORs\": Each of the five filter types are lists that are considered individually as ORs. For example, a list of models means get data from any of them. The filters are combined by ANDs, meaning only data that matches all filters. (See the below example.) The types of filters are: 1) Filter by model : Pass zero or more model abbreviations in the models field. Example: {\"models\": [\"60-contact\", \"CovidIL_100\"]} # gets data only from either of these two models 2) Filter by unit : Pass zero or more unit names in the units field. Example: {\"units\": [\"US\"]} # get data only for this unit 3) Filter by target : Pass zero or more target names in the targets field. Example: {\"targets\": [\"0 day ahead cum death\", \"1 day ahead cum death\"]} # get data only for either of these two targets 4) Filter by timezero : Pass zero or more timezero dates in yyyy-mm-dd format in the timezeros field. Example: {\"timezeros\": [\"2020-05-14\", \"2020-05-09\"]} # get data only for either of these two time zeros 5) Filter by forecast type : Pass a list of string types in the types field. Choices are bin , named , point , sample , and quantile . Example: {\"types\": [\"point\", \"quantile\"]} # get only point and quantile data 6) Filter by forecast version : Passing a datetime string in the optional as_of field causes the query to return only those forecast versions whose issued_at is <= the as_of datetime (AKA timestamp). If no as_of is passed then the query returns the most recent forecasts. (See Forecast Versions for more about versions.) The as_of field format must be a datetime as parsed by the dateutil python library , which accepts a variety of styles. You can find example here . Importantly, the datetime must include timezone information for disambiguation, without which the query will fail. (Note that Zoltar displays all datetimes using the UTC timezone.) Here's an example: {\"as_of\": \"2021-05-10 12:00 UTC \"} # get forecasts whose issued_at is <= this date The lists in 1 through 5 operate as \"OR\" on their own but are combined in the final query as \"AND\"s. Here's an example: {\"models\": [\"60-contact\", \"CovidIL_100\"], \"units\": [\"US\"], \"targets\": [\"0 day ahead cum death\", \"1 day ahead cum death\"], \"timezeros\": [\"2020-05-14\", \"2020-05-09\"], \"types\": [\"point\", \"quantile\"] } This results in data that is: (from either the 60-contact OR CovidIL_100 models) AND (the unit is US ) AND (the target is either 0 day ahead cum death or 1 day ahead cum death ) AND (the timezero is either 2020-05-14 OR 2020-05-09 ) AND (the prediction type is either point OR quantile ) Note that not all types of filters are required to be specified. Any missing ones are treated by default as \"all\". In the previous example, if we omitted types then we'd get similar data except it would include all prediction types instead of just point or quantile ones.","title":"Query format"},{"location":"ForecastQueryFormat/#data-format","text":"The forecasts are returned in the CSV format documented at Forecast data format (CSV) .","title":"Data format"},{"location":"ForecastQueryFormat/#data-limits","text":"Because queries have the potential to return millions of rows, the number of resulting rows is capped. The query fails if it would exceed the limit.","title":"Data limits"},{"location":"ForecastVersions/","text":"Forecast versions \u00b6 Forecasts in Zoltar can be versioned . A version is identified by the combination of the forecast's model , time zero , and issued_at fields. Multiple versions for the same model and time zero will have different issued_at values. These can be identified by the gray version numbering shown in the version column on the model detail page 's Forecasts list (e.g., \"1 of 2\"), and on the Issued at row of the forecast detail page 's information table at the top (e.g., \"(Version 3 of 3)\"). Forecast version rules \u00b6 Zoltar enforces these rules about forecast versions: No uploaded forecast can have no rows of data. No uploaded forecast can load 100% duplicate data of a previous version. New forecast versions cannot imply any retracted prediction elements in existing versions, i.e., you cannot load data that's a subset of the previous forecast's data. New forecast versions cannot be positioned before any existing versions. Editing a version's issued_at cannot reposition it before any existing forecasts. Deleted forecasts cannot be positioned before any newer versions. Notes: - Rule 3 applies only to non-oracle forecasts, i.e., truth forecasts are allowed to be partial because we assume truth retractions are not allowed. - This means we require forecasts to be uploaded in issued_at order. If you need to \"backfill\" older versions, you'll first have to delete forecasts with newer issued_at datetimes before uploading older ones. Retracted predictions \u00b6 Zoltar supports retracting individual prediction elements. A retracted element marks a particular combination of unit, target, and prediction type to be ignored when executing a forecast query if the user passes an as_of value that's on or later than the retraction issued_at . In that case there will be no value returned for the retracted prediction element. However, an as_of that's earlier than the forecast's issued_at will result in the element's pre-retraction value being returned. Users who want to return the forecast's original data including retractions, should use the API or web UI as documented in download a single forecast . In this case Zoltar will include retractions as they were uploaded - with null \"prediction\" value in the JSON (see below). Retracted predictions are identified in JSON forecast data format files by passing NULL for the \"prediction\" value. Note: Retractions are indicated in quantile CSV files by NULL point and quantile values. The libraries take care of converting these into the JSON below. See Quantile forecast format (CSV) for quantile retraction format details. For example, if we have two versions for a time zero, and the first forecast contains this prediction: { \"unit\": \"location1\", \"target\": \"pct next week\", \"class\": \"point\", \"prediction\": { \"value\": 2.1 } } Then we could retract that prediction element in the second forecast by passing this replacement: { \"unit\": \"location1\", \"target\": \"pct next week\", \"class\": \"point\", \"prediction\": null } Translating this JSON representation to/from CSV files is handled by the Zoltar libraries . Duplicate data \u00b6 When Zoltar loads a forecast's prediction elements, it skips those that are identical to any in previous versions. This saves on storage space, and is transparent to users (downloading forecast data via queries or single forecasts will reassemble the original data).","title":"Forecast Versions"},{"location":"ForecastVersions/#forecast-versions","text":"Forecasts in Zoltar can be versioned . A version is identified by the combination of the forecast's model , time zero , and issued_at fields. Multiple versions for the same model and time zero will have different issued_at values. These can be identified by the gray version numbering shown in the version column on the model detail page 's Forecasts list (e.g., \"1 of 2\"), and on the Issued at row of the forecast detail page 's information table at the top (e.g., \"(Version 3 of 3)\").","title":"Forecast versions"},{"location":"ForecastVersions/#forecast-version-rules","text":"Zoltar enforces these rules about forecast versions: No uploaded forecast can have no rows of data. No uploaded forecast can load 100% duplicate data of a previous version. New forecast versions cannot imply any retracted prediction elements in existing versions, i.e., you cannot load data that's a subset of the previous forecast's data. New forecast versions cannot be positioned before any existing versions. Editing a version's issued_at cannot reposition it before any existing forecasts. Deleted forecasts cannot be positioned before any newer versions. Notes: - Rule 3 applies only to non-oracle forecasts, i.e., truth forecasts are allowed to be partial because we assume truth retractions are not allowed. - This means we require forecasts to be uploaded in issued_at order. If you need to \"backfill\" older versions, you'll first have to delete forecasts with newer issued_at datetimes before uploading older ones.","title":"Forecast version rules"},{"location":"ForecastVersions/#retracted-predictions","text":"Zoltar supports retracting individual prediction elements. A retracted element marks a particular combination of unit, target, and prediction type to be ignored when executing a forecast query if the user passes an as_of value that's on or later than the retraction issued_at . In that case there will be no value returned for the retracted prediction element. However, an as_of that's earlier than the forecast's issued_at will result in the element's pre-retraction value being returned. Users who want to return the forecast's original data including retractions, should use the API or web UI as documented in download a single forecast . In this case Zoltar will include retractions as they were uploaded - with null \"prediction\" value in the JSON (see below). Retracted predictions are identified in JSON forecast data format files by passing NULL for the \"prediction\" value. Note: Retractions are indicated in quantile CSV files by NULL point and quantile values. The libraries take care of converting these into the JSON below. See Quantile forecast format (CSV) for quantile retraction format details. For example, if we have two versions for a time zero, and the first forecast contains this prediction: { \"unit\": \"location1\", \"target\": \"pct next week\", \"class\": \"point\", \"prediction\": { \"value\": 2.1 } } Then we could retract that prediction element in the second forecast by passing this replacement: { \"unit\": \"location1\", \"target\": \"pct next week\", \"class\": \"point\", \"prediction\": null } Translating this JSON representation to/from CSV files is handled by the Zoltar libraries .","title":"Retracted predictions"},{"location":"ForecastVersions/#duplicate-data","text":"When Zoltar loads a forecast's prediction elements, it skips those that are identical to any in previous versions. This saves on storage space, and is transparent to users (downloading forecast data via queries or single forecasts will reassemble the original data).","title":"Duplicate data"},{"location":"Forecasts/","text":"Managing forecasts \u00b6 A forecast is a set of predictions for combinations of units and targets. See Data Model for detail on the structure of predictions. Following are the forecast operations you can do from within Zoltar. Note: Operations on forecasts, like many Zoltar activities, can be done either through the zoltardata.com web interface or programmatically using the Zoltar libraries . Note: As mentioned in Concepts , forecasts can have versions via their issued_at field. However, versioning is currently supported only via the API. Upload a forecast \u00b6 Here we show how to upload forecast data into Zoltar. Note: As mentioned at Jobs , uploading a forecast is done in a separate worker process because it may take more than a handful of seconds to run. Thus the workflow is based on that (see Job workflow for details). Forecasts are uploaded to a particular model for a particular time zero. To upload one: Go to the model detail page of the one you want to upload into. Make sure \"Hide if no data\" is unchecked. Find the time zero that the forecast is associated with. If the time zero already has a forecast then delete it (see Delete a forecast below). You can tell if a time zero has an uploaded forecast in two ways: the text in the \"Data Source\" column is a link instead of the words \"(No data)\" and the icon in the \"Action\" column is a red trash can and not a green upload icon. Click the \"Browse...\" button in the time zero's \"Action\" column. In the dialog that appears, select a Forecast data format JSON file Click the green upload button. If the file is OK then you will be taken to a job detail page that shows the status of your upload, with the message \"Queued the forecast file _ for uploading.\", where _ is your file's name. Once the upload is successful (you can refresh the job detail page to check) then you will see the newly-uploaded file listed next to the selected time zero on the model detail page . If there was a problem uploading then you will see the upload's status as FAILED . The Failure section will provide some information to help debug the problem. Delete a forecast \u00b6 Delete a forecast via these steps: Go to the model detail page where the forecast resides. Click the red trash can button in the \"Action\" column. Click \"Delete\" in the confirmation dialog that appears. Note that this cannot be undone! Download a single forecast \u00b6 To download a particular forecast: Go to the model detail page where the forecast resides. Click the link in the \"Data Source\" column to go to the forecast detail page . Click the \"Download JSON\" button and save the file in the JSON format documented at Forecast data format for details. (Note that if you are only interested in a particular unit/target combination, you can use the \"Query Forecast Data\" form on that page - see here for details.) Download multiple forecasts \u00b6 Note: Downloading multiple forecasts is currently available only to users with Zoltar accounts. Note: As mentioned at Jobs , downloading a forecast is done in a separate worker process because it may take more than a handful of seconds to run. Thus the workflow is based on that (see Job workflow for details). Forecasts are downloaded by executing a forecast query by either a) Zoltar API using the Zoltar libraries , or b) via a simple web UI form (shown below). In both cases you need to follow these steps: Decide the data of interest (i.e., models , units , targets , timezeros , and prediction types ). Submit the query to get a Job ID. Poll the resulting Job until it succeeds (see Check a job's status ). Download the job's data (see Download a job's data ). The format is described at Forecast data format (CSV) . Download forecasts via the web UI \u00b6 To download forecast data via the web UI: Go to the project detail page whose models contain the forecasts. Click the \"Download\" button to the right of \"Forecasts\" in the Features section at the page's top. On the \"Edit Forecast Query\" page that shows, enter your query and then click \"Submit\" (see the screen shot below). Poll the resulting Job until it succeeds (see Check a job's status ). Download the job's data (see Download a job's data ). Here's an example of the Edit Forecast Query page:","title":"Forecasts"},{"location":"Forecasts/#managing-forecasts","text":"A forecast is a set of predictions for combinations of units and targets. See Data Model for detail on the structure of predictions. Following are the forecast operations you can do from within Zoltar. Note: Operations on forecasts, like many Zoltar activities, can be done either through the zoltardata.com web interface or programmatically using the Zoltar libraries . Note: As mentioned in Concepts , forecasts can have versions via their issued_at field. However, versioning is currently supported only via the API.","title":"Managing forecasts"},{"location":"Forecasts/#upload-a-forecast","text":"Here we show how to upload forecast data into Zoltar. Note: As mentioned at Jobs , uploading a forecast is done in a separate worker process because it may take more than a handful of seconds to run. Thus the workflow is based on that (see Job workflow for details). Forecasts are uploaded to a particular model for a particular time zero. To upload one: Go to the model detail page of the one you want to upload into. Make sure \"Hide if no data\" is unchecked. Find the time zero that the forecast is associated with. If the time zero already has a forecast then delete it (see Delete a forecast below). You can tell if a time zero has an uploaded forecast in two ways: the text in the \"Data Source\" column is a link instead of the words \"(No data)\" and the icon in the \"Action\" column is a red trash can and not a green upload icon. Click the \"Browse...\" button in the time zero's \"Action\" column. In the dialog that appears, select a Forecast data format JSON file Click the green upload button. If the file is OK then you will be taken to a job detail page that shows the status of your upload, with the message \"Queued the forecast file _ for uploading.\", where _ is your file's name. Once the upload is successful (you can refresh the job detail page to check) then you will see the newly-uploaded file listed next to the selected time zero on the model detail page . If there was a problem uploading then you will see the upload's status as FAILED . The Failure section will provide some information to help debug the problem.","title":"Upload a forecast"},{"location":"Forecasts/#delete-a-forecast","text":"Delete a forecast via these steps: Go to the model detail page where the forecast resides. Click the red trash can button in the \"Action\" column. Click \"Delete\" in the confirmation dialog that appears. Note that this cannot be undone!","title":"Delete a forecast"},{"location":"Forecasts/#download-a-single-forecast","text":"To download a particular forecast: Go to the model detail page where the forecast resides. Click the link in the \"Data Source\" column to go to the forecast detail page . Click the \"Download JSON\" button and save the file in the JSON format documented at Forecast data format for details. (Note that if you are only interested in a particular unit/target combination, you can use the \"Query Forecast Data\" form on that page - see here for details.)","title":"Download a single forecast"},{"location":"Forecasts/#download-multiple-forecasts","text":"Note: Downloading multiple forecasts is currently available only to users with Zoltar accounts. Note: As mentioned at Jobs , downloading a forecast is done in a separate worker process because it may take more than a handful of seconds to run. Thus the workflow is based on that (see Job workflow for details). Forecasts are downloaded by executing a forecast query by either a) Zoltar API using the Zoltar libraries , or b) via a simple web UI form (shown below). In both cases you need to follow these steps: Decide the data of interest (i.e., models , units , targets , timezeros , and prediction types ). Submit the query to get a Job ID. Poll the resulting Job until it succeeds (see Check a job's status ). Download the job's data (see Download a job's data ). The format is described at Forecast data format (CSV) .","title":"Download multiple forecasts"},{"location":"Forecasts/#download-forecasts-via-the-web-ui","text":"To download forecast data via the web UI: Go to the project detail page whose models contain the forecasts. Click the \"Download\" button to the right of \"Forecasts\" in the Features section at the page's top. On the \"Edit Forecast Query\" page that shows, enter your query and then click \"Submit\" (see the screen shot below). Poll the resulting Job until it succeeds (see Check a job's status ). Download the job's data (see Download a job's data ). Here's an example of the Edit Forecast Query page:","title":"Download forecasts via the web UI"},{"location":"ForecastsSummaryPage/","text":"Forecasts summary page \u00b6 Reached via the project detail page 's Features section, this page collects a summary of all of a project's forecasts. It contains a heatmap at the top that can be colored in one of three ways (# predictions, # units, or # targets), and a table of all forecasts (including all versions) in the project. Follow are examples from two projects. Hovering the mouse over the heatmap shows information for that particular forecast (only the latest versions are shown), and clicking takes you to that forecast. Documentation project \u00b6 Covidhub project \u00b6","title":"Forecasts summary page"},{"location":"ForecastsSummaryPage/#forecasts-summary-page","text":"Reached via the project detail page 's Features section, this page collects a summary of all of a project's forecasts. It contains a heatmap at the top that can be colored in one of three ways (# predictions, # units, or # targets), and a table of all forecasts (including all versions) in the project. Follow are examples from two projects. Hovering the mouse over the heatmap shows information for that particular forecast (only the latest versions are shown), and clicking takes you to that forecast.","title":"Forecasts summary page"},{"location":"ForecastsSummaryPage/#documentation-project","text":"","title":"Documentation project"},{"location":"ForecastsSummaryPage/#covidhub-project","text":"","title":"Covidhub project"},{"location":"Help/","text":"Help \u00b6 Please see the contact section on the index page for our email address, account requests, our email list, and our GitHub repository issues page.","title":"Getting Help"},{"location":"Help/#help","text":"Please see the contact section on the index page for our email address, account requests, our email list, and our GitHub repository issues page.","title":"Help"},{"location":"HomePage/","text":"Zoltar Home page \u00b6 The Zoltar home page zoltardata.com is a simple welcome page with options for listing all projects, signing in, or getting started reading this documentation. Clicking on \"View Projects\" below the \"Projects\" text (or \"Projects\" in the header) takes you to the Zoltar Projects page , which lists all of the projects in the archive. Navigation header \u00b6 At the page's top is a black navigation header that's shown on all pages. It contains three icons: Home page (the Zoltar crystal ball in the upper left), and on the right a user drop down menu and a help icon (question mark) on the far right. The drop down menu's appearance depends on whether a user is logged in. If you are not logged in then \"Sign in\" is shown as in the screen shot. Clicking \"Sign in\" takes you to a typical login page where you specify your account's user name and password. (To obtain an account, please contact us .) If you are logged in then its text is the user name and the menu items are links to the user profile page, and a logout item. Currently, the page looks like this: Projects page \u00b6 A project is a collection of forecast models and their forecasts , and is described in more detail below. The projects page shows basic project information, including name, owner, description, and (in the \"Summary\" column) information about the number of models, forecasts, and predictions in the project. (See Data Model for more information on terminology like predictions .) Currently, the page looks like this: This page shows all projects in the archive that are visible to you, based on whether you are logged in and which projects you account has access to. Thus, some may be hidden. Above the list is some information about this ( There are 6 public projects and 1 project with access limited to collaborators only. ) From here you can: Click on a project name to go to its detail page . Create a project if you are signed in. (Any logged in user can create projects via the \"New\" drop down button towards the top. Clicking it allows you to create one either by uploading a project configuration file or creating via a form where you can fill in some basic details. See Creating projects for details.","title":"Zoltar Home page"},{"location":"HomePage/#zoltar-home-page","text":"The Zoltar home page zoltardata.com is a simple welcome page with options for listing all projects, signing in, or getting started reading this documentation. Clicking on \"View Projects\" below the \"Projects\" text (or \"Projects\" in the header) takes you to the Zoltar Projects page , which lists all of the projects in the archive.","title":"Zoltar Home page"},{"location":"HomePage/#navigation-header","text":"At the page's top is a black navigation header that's shown on all pages. It contains three icons: Home page (the Zoltar crystal ball in the upper left), and on the right a user drop down menu and a help icon (question mark) on the far right. The drop down menu's appearance depends on whether a user is logged in. If you are not logged in then \"Sign in\" is shown as in the screen shot. Clicking \"Sign in\" takes you to a typical login page where you specify your account's user name and password. (To obtain an account, please contact us .) If you are logged in then its text is the user name and the menu items are links to the user profile page, and a logout item. Currently, the page looks like this:","title":"Navigation header"},{"location":"HomePage/#projects-page","text":"A project is a collection of forecast models and their forecasts , and is described in more detail below. The projects page shows basic project information, including name, owner, description, and (in the \"Summary\" column) information about the number of models, forecasts, and predictions in the project. (See Data Model for more information on terminology like predictions .) Currently, the page looks like this: This page shows all projects in the archive that are visible to you, based on whether you are logged in and which projects you account has access to. Thus, some may be hidden. Above the list is some information about this ( There are 6 public projects and 1 project with access limited to collaborators only. ) From here you can: Click on a project name to go to its detail page . Create a project if you are signed in. (Any logged in user can create projects via the \"New\" drop down button towards the top. Clicking it allows you to create one either by uploading a project configuration file or creating via a form where you can fill in some basic details. See Creating projects for details.","title":"Projects page"},{"location":"Jobs/","text":"Jobs \u00b6 Some Zoltar operations can take longer than a handful of seconds to run. For these cases, Zoltar offloads them to a separate worker process so that the web site remains responsive. We call those offloaded operations Jobs , and this page describes how to work with them. These are the activities that return jobs: Uploading truth, uploading a forecast (does not result in data) Deleting a forecast (no data) To see a list of all of your jobs, go to your profile page and scroll down to the Jobs section. Workflow \u00b6 When you initiate one of the above activities (either via the Web or the API), Zoltar creates an internal Job to track it and returns that Job's ID so you can check its status and optionally download any corresponding data. The workflow is: Initiate the activity. This returns a job that you can use to a) track the status of the query, and b) optionally download the job's data. Poll the job until its status is SUCCESS . (You can use the web UI to do this - see Check a job's status for how.) Optionally download the job's data , if applicable. Note that data is available for 24 hours after it's created. Check a job's status \u00b6 The job detail page is where you can check the status of long-running activities. (Note that how long it takes for a file to be processed depends on how busy the site is.) Note that you must refresh this page to get the latest status (it does not update dynamically). Here's an example job detail page for an upload whose status is SUCCESS: You can see that it has the following fields: User : User who uploaded the file. Status : The upload's status, which is one of the following: PENDING : The state an upload starts in. CLOUD_FILE_UPLOADED : The uploaded file was successfully saved to temporary cloud storage. QUEUED : The upload file job was successfully enqueued for processing. CLOUD_FILE_DOWNLOADED : The uploaded file was successfully retrieved from temporary cloud storage SUCCESS : The job was successfully completed. FAILED : The job failed. TIMEOUT : The job ran too long and was terminated. Failure : The failure message if status is FAILED, or \"None\" otherwise. This section will provide some information to help debug the problem. \u0394T : How much time the upload took to process. This is formatted as \" : : . \", For example, \"0:00:01.155223\" means the job took zero hours, zero minutes, one second, and 155223 microseconds. Created : Date and time the file was uploaded at. Updated : The last time the upload's status was changed. JSON In : The JSON information passed internally to the upload. You can ignore this. JSON Out : \"\" returned internally by the upload. \"\" Here is a job whose status is FAILED, with a failure message: Download a job's data \u00b6 Each job's detail page has a \"Download CSV\" button at the bottom. The button is enabled if the job has corresponding data, and disabled otherwise with the message (No job data) next to the button. The first screen shot above shows a job that has data that can be downloaded. Here's a job with no data available:","title":"Jobs"},{"location":"Jobs/#jobs","text":"Some Zoltar operations can take longer than a handful of seconds to run. For these cases, Zoltar offloads them to a separate worker process so that the web site remains responsive. We call those offloaded operations Jobs , and this page describes how to work with them. These are the activities that return jobs: Uploading truth, uploading a forecast (does not result in data) Deleting a forecast (no data) To see a list of all of your jobs, go to your profile page and scroll down to the Jobs section.","title":"Jobs"},{"location":"Jobs/#workflow","text":"When you initiate one of the above activities (either via the Web or the API), Zoltar creates an internal Job to track it and returns that Job's ID so you can check its status and optionally download any corresponding data. The workflow is: Initiate the activity. This returns a job that you can use to a) track the status of the query, and b) optionally download the job's data. Poll the job until its status is SUCCESS . (You can use the web UI to do this - see Check a job's status for how.) Optionally download the job's data , if applicable. Note that data is available for 24 hours after it's created.","title":"Workflow"},{"location":"Jobs/#check-a-jobs-status","text":"The job detail page is where you can check the status of long-running activities. (Note that how long it takes for a file to be processed depends on how busy the site is.) Note that you must refresh this page to get the latest status (it does not update dynamically). Here's an example job detail page for an upload whose status is SUCCESS: You can see that it has the following fields: User : User who uploaded the file. Status : The upload's status, which is one of the following: PENDING : The state an upload starts in. CLOUD_FILE_UPLOADED : The uploaded file was successfully saved to temporary cloud storage. QUEUED : The upload file job was successfully enqueued for processing. CLOUD_FILE_DOWNLOADED : The uploaded file was successfully retrieved from temporary cloud storage SUCCESS : The job was successfully completed. FAILED : The job failed. TIMEOUT : The job ran too long and was terminated. Failure : The failure message if status is FAILED, or \"None\" otherwise. This section will provide some information to help debug the problem. \u0394T : How much time the upload took to process. This is formatted as \" : : . \", For example, \"0:00:01.155223\" means the job took zero hours, zero minutes, one second, and 155223 microseconds. Created : Date and time the file was uploaded at. Updated : The last time the upload's status was changed. JSON In : The JSON information passed internally to the upload. You can ignore this. JSON Out : \"\" returned internally by the upload. \"\" Here is a job whose status is FAILED, with a failure message:","title":"Check a job's status"},{"location":"Jobs/#download-a-jobs-data","text":"Each job's detail page has a \"Download CSV\" button at the bottom. The button is enabled if the job has corresponding data, and disabled otherwise with the message (No job data) next to the button. The first screen shot above shows a job that has data that can be downloaded. Here's a job with no data available:","title":"Download a job's data"},{"location":"ModelDetailPage/","text":"Model detail page \u00b6 A model is the representation of code that generates forecasts. Clicking on a model link takes you to its detail page. The detail page is divided into two vertical sections with bold headings, described next: Details table and Forecasts . Here's an example model detail page: Model details table \u00b6 At the top of the page is a table showing information related to the model: Name : The model's name. Abbreviation : A short name for the model. It's the primary way that models are named. Owner : The model's owner. The owner is the user that created the model (which is done on the home page), and she can edit or delete the model, and upload or delete its forecasts. Project : A link to the project the model belongs to. Team name : The name of the team that developed the model. This is not used directly by Zoltar. Description : Prose provided by model owner. It should include information on reproducing the model's results. Contributors : List of names as specified by the model owner. License : License \"\" Notes : \"\" Citation : \"\" Methods : \"\" Home : A link to the model home page. Auxiliary data : An optional link to model-specific data files that were used by the model beyond the project's core data. Not used directly by Zoltar. Forecasts \u00b6 The Forecasts section is a table of the model's forecasts, ordered by project's time zeros. Each row has these fields: Timezero : The time zero that the forecast applies to. (The data version date, if any, is not shown here.) See Concepts for more about time zeros. Data Source : Text describing where the forecast came from. It can be anything but is typically a data file name, such as a CSV. The source is a link to the forecast's forecast detail page . It says \"(No data)\" if a forecast has not yet been uploaded for that time zero. Upload Time : The date and time that the forecast was uploaded to Zoltar. Issued at : The datetime identifying the forecast's version . If there is more than one version for this forecast's timezero then text like \"Version 1 of 2\" will show in the Version column. (See Forecast Versions for more about versions.) Version : Text describing the version, such as \"Version 1 of 2\". It is empty if there's only one forecast version for the timezero. Action : A button that is either a green upload icon if there is no data associated with the time zero, or a red delete button otherwise. See Forecasts for instructions on how to upload forecasts, and File formats for how forecast files are structured in Zoltar. This feature is enabled only for project owners or model owners. The Hide if no data checkbox, if checked, shows only those Timezeros that have an uploaded forecast. Uncheck it to see all Timezeros (necessary if you want to upload any).","title":"Model detail page"},{"location":"ModelDetailPage/#model-detail-page","text":"A model is the representation of code that generates forecasts. Clicking on a model link takes you to its detail page. The detail page is divided into two vertical sections with bold headings, described next: Details table and Forecasts . Here's an example model detail page:","title":"Model detail page"},{"location":"ModelDetailPage/#model-details-table","text":"At the top of the page is a table showing information related to the model: Name : The model's name. Abbreviation : A short name for the model. It's the primary way that models are named. Owner : The model's owner. The owner is the user that created the model (which is done on the home page), and she can edit or delete the model, and upload or delete its forecasts. Project : A link to the project the model belongs to. Team name : The name of the team that developed the model. This is not used directly by Zoltar. Description : Prose provided by model owner. It should include information on reproducing the model's results. Contributors : List of names as specified by the model owner. License : License \"\" Notes : \"\" Citation : \"\" Methods : \"\" Home : A link to the model home page. Auxiliary data : An optional link to model-specific data files that were used by the model beyond the project's core data. Not used directly by Zoltar.","title":"Model details table"},{"location":"ModelDetailPage/#forecasts","text":"The Forecasts section is a table of the model's forecasts, ordered by project's time zeros. Each row has these fields: Timezero : The time zero that the forecast applies to. (The data version date, if any, is not shown here.) See Concepts for more about time zeros. Data Source : Text describing where the forecast came from. It can be anything but is typically a data file name, such as a CSV. The source is a link to the forecast's forecast detail page . It says \"(No data)\" if a forecast has not yet been uploaded for that time zero. Upload Time : The date and time that the forecast was uploaded to Zoltar. Issued at : The datetime identifying the forecast's version . If there is more than one version for this forecast's timezero then text like \"Version 1 of 2\" will show in the Version column. (See Forecast Versions for more about versions.) Version : Text describing the version, such as \"Version 1 of 2\". It is empty if there's only one forecast version for the timezero. Action : A button that is either a green upload icon if there is no data associated with the time zero, or a red delete button otherwise. See Forecasts for instructions on how to upload forecasts, and File formats for how forecast files are structured in Zoltar. This feature is enabled only for project owners or model owners. The Hide if no data checkbox, if checked, shows only those Timezeros that have an uploaded forecast. Uncheck it to see all Timezeros (necessary if you want to upload any).","title":"Forecasts"},{"location":"Models/","text":"Managing forecast models \u00b6 A forecast model is the representation of a team's code that generates forecast data, and is contained by a project. Described here are the common operations done with models. Note that you must have a Zoltar account to manage models, and in particular you must be either the model's owner or the project owner to do the following. Create a model \u00b6 Models are created via a form: Go to the project detail page where you want to create a model. Click the green \"New\" button to the right of the models list. Fill in the fields and click \"Create\". Most fields are required, which will be indicated with error messages when you submit the form and any are missing. Edit a model \u00b6 Models are edited via a form: Go to the model detail page of the one you want to edit. Click the green edit pencil button to the right of the model name. Fill in the fields and click \"Save\". Delete a model \u00b6 Finally, to delete a model: Go to the model detail page of the one you want to delete. At the top, to the right of the model name, click the red delete trash can button and then click \"Delete\" in the confirmation dialog that appears. Note that this cannot be undone!","title":"Models"},{"location":"Models/#managing-forecast-models","text":"A forecast model is the representation of a team's code that generates forecast data, and is contained by a project. Described here are the common operations done with models. Note that you must have a Zoltar account to manage models, and in particular you must be either the model's owner or the project owner to do the following.","title":"Managing forecast models"},{"location":"Models/#create-a-model","text":"Models are created via a form: Go to the project detail page where you want to create a model. Click the green \"New\" button to the right of the models list. Fill in the fields and click \"Create\". Most fields are required, which will be indicated with error messages when you submit the form and any are missing.","title":"Create a model"},{"location":"Models/#edit-a-model","text":"Models are edited via a form: Go to the model detail page of the one you want to edit. Click the green edit pencil button to the right of the model name. Fill in the fields and click \"Save\".","title":"Edit a model"},{"location":"Models/#delete-a-model","text":"Finally, to delete a model: Go to the model detail page of the one you want to delete. At the top, to the right of the model name, click the red delete trash can button and then click \"Delete\" in the confirmation dialog that appears. Note that this cannot be undone!","title":"Delete a model"},{"location":"ProjectDetailPage/","text":"Project detail page \u00b6 A project is the main element for representing a forecasting challenge. It has an owner (a registered user in the system), and zero or more model owners (also users in the system). A project owner can do anything to the project, but model owners are limited to creating, editing, and deleting forecast models, and uploading and deleting forecasts. (To become a model owner you must contact the project owner.) Each project's detail page is divided into five vertical sections with bold headings, described next: Details table , Models , Units , Targets , and Time zeros . Here's an example (the bottom has been cut off): Project details table \u00b6 At the top of the page is a table showing this information related to the project: Summary : The same summary as on the home page: The number of models and forecasts in the project. Note that this may be an estimate. Owner : The user that has full control of the project, and includes authorization to view, edit, and delete anything (models, forecasts, etc.) The owner is the user that created the project (which is done on the home page). Model owners : A list of users who can view the project (applicable only if the project is private), and who can create and delete models, and upload and delete forecasts. The project owner specifies model owners when she creates or edits the project. Time Interval Type : Tells the D3 Foresight component what its x-axis label should be. Choices: Week, Biweek, or Month. Visibility : A project can be either public or private , which controls project visibility, including accessing data. Project owners set this when they create the project. Visibility applies to list and detail pages, along with API endpoints. Public projects are viewable by anyone, users and anonymous visitors included. Private projects can only be viewed by project owners and model owners. This means that in order to grant a user access to a private account, the project owner must add her to the project's model owners list, even if that user will not be managing any models. Description : Prose provided by project owner. It should cover these topics: Information about the \"real-time-ness\" of data, i.e., revised/unrevised. Details about how models interpret time zeros and data version dates. Data file naming scheme. Home : A link to the project's home page, which might include details about any competitions, source code, team members, included models, etc. Core data : A link to a page that contains data (e.g., CSV files) used to train models. For model competitions, it should include all data sets made available to everyone in the challenge, including supplemental data like Google queries or weather data. Ideally Zoltar users interested in re-running a project's models have all they need in the home and core data directories. However, they are not used directly by Zoltar. Truth data : A data file containing target ground truth that the project owner uploads. This data contains observed target values for time zeros and locations in the project, and is a project-agnostic way to capture actual values that models predicted for. It is used to extract the 'actual' data used in the D3 component's TimeChart. See Truth for details. Features : Links to various pages, including project explorer , forecasts summary and download forecasts . Forecast models \u00b6 The Models section lists the project's forecast models by name, with links to model detail pages and each model's oldest and newest forecast details (see details below), with the latter being a link to that forecast's detail page. A model captures a team's prediction challenge effort, and includes forecasts for some or all time zeros defined for the project. (See Concepts for more about time zeros.) If you're a project owner or model owner then a \"New\" button is shown that takes you to a form for creating a model. Clicking on a model's name takes you to its model detail page . Units \u00b6 This section lists names of the units in the project. (See Concepts for more about time zeros.) These were defined by project owner when creating the project. Often units are used to represent locations or regions that targets apply to. Targets \u00b6 This section lists information about project forecast targets, which are a central Zoltar concept. See Targets for more about them. Like units, these were created by the project owner. Some of these parameters are optional - this table shows which apply based on target type. The table includes the following columns: Target group : This column is either a target's name, or a derived name from a group of related targets (step-ahead ones whose step ahead increment is in the name). # Targets : How many targets are in the group, or 1 if not a group. Type : The target's type . Unit : E.g., \"percent\" or \"week\". Unit is used when previewing data, and when downloading it. (Be aware that it can be confusing having both unit objects as above along with a specific target's unit.) Step Ahead? : Shows two pieces of information: 1) Whether the target is a \"step ahead\" one, and (if so) 2) what the \"step ahead increment\" is. (Step ahead targets are used to predict values in the future, and are used by some analysis tools.) Example Target : A specific target's name if a group, or the one target's name otherwise. Time zeros \u00b6 This section details the project's time zeros . (See Concepts for more about time zeros.) It has these columns: Time zero : The date from which a forecast originates and to which targets are relative (i.e. a \"2-week-ahead forecast\" is two weeks ahead of the time zero). Every forecast has a time zero. See Concepts for more about time zeros. Data version date : An optional piece of metadata for a forecast. If it exists, it is associated with a time zero. It refers to the latest date at which any data source used for the forecasts should be considered. If present, it can be used externally by system users to recreate model results by \"rolling back\" the core data to a particular state. # Forecasts : A count of the number of forecasts for this time zero. Starts Season : Shows two pieces of information: 1) Whether the time zero is starts a season (it is blank if it does not start a season), and 2) the season name itself (which indicates that the time zero does start a season.)","title":"Project detail page"},{"location":"ProjectDetailPage/#project-detail-page","text":"A project is the main element for representing a forecasting challenge. It has an owner (a registered user in the system), and zero or more model owners (also users in the system). A project owner can do anything to the project, but model owners are limited to creating, editing, and deleting forecast models, and uploading and deleting forecasts. (To become a model owner you must contact the project owner.) Each project's detail page is divided into five vertical sections with bold headings, described next: Details table , Models , Units , Targets , and Time zeros . Here's an example (the bottom has been cut off):","title":"Project detail page"},{"location":"ProjectDetailPage/#project-details-table","text":"At the top of the page is a table showing this information related to the project: Summary : The same summary as on the home page: The number of models and forecasts in the project. Note that this may be an estimate. Owner : The user that has full control of the project, and includes authorization to view, edit, and delete anything (models, forecasts, etc.) The owner is the user that created the project (which is done on the home page). Model owners : A list of users who can view the project (applicable only if the project is private), and who can create and delete models, and upload and delete forecasts. The project owner specifies model owners when she creates or edits the project. Time Interval Type : Tells the D3 Foresight component what its x-axis label should be. Choices: Week, Biweek, or Month. Visibility : A project can be either public or private , which controls project visibility, including accessing data. Project owners set this when they create the project. Visibility applies to list and detail pages, along with API endpoints. Public projects are viewable by anyone, users and anonymous visitors included. Private projects can only be viewed by project owners and model owners. This means that in order to grant a user access to a private account, the project owner must add her to the project's model owners list, even if that user will not be managing any models. Description : Prose provided by project owner. It should cover these topics: Information about the \"real-time-ness\" of data, i.e., revised/unrevised. Details about how models interpret time zeros and data version dates. Data file naming scheme. Home : A link to the project's home page, which might include details about any competitions, source code, team members, included models, etc. Core data : A link to a page that contains data (e.g., CSV files) used to train models. For model competitions, it should include all data sets made available to everyone in the challenge, including supplemental data like Google queries or weather data. Ideally Zoltar users interested in re-running a project's models have all they need in the home and core data directories. However, they are not used directly by Zoltar. Truth data : A data file containing target ground truth that the project owner uploads. This data contains observed target values for time zeros and locations in the project, and is a project-agnostic way to capture actual values that models predicted for. It is used to extract the 'actual' data used in the D3 component's TimeChart. See Truth for details. Features : Links to various pages, including project explorer , forecasts summary and download forecasts .","title":"Project details table"},{"location":"ProjectDetailPage/#forecast-models","text":"The Models section lists the project's forecast models by name, with links to model detail pages and each model's oldest and newest forecast details (see details below), with the latter being a link to that forecast's detail page. A model captures a team's prediction challenge effort, and includes forecasts for some or all time zeros defined for the project. (See Concepts for more about time zeros.) If you're a project owner or model owner then a \"New\" button is shown that takes you to a form for creating a model. Clicking on a model's name takes you to its model detail page .","title":"Forecast models"},{"location":"ProjectDetailPage/#units","text":"This section lists names of the units in the project. (See Concepts for more about time zeros.) These were defined by project owner when creating the project. Often units are used to represent locations or regions that targets apply to.","title":"Units"},{"location":"ProjectDetailPage/#targets","text":"This section lists information about project forecast targets, which are a central Zoltar concept. See Targets for more about them. Like units, these were created by the project owner. Some of these parameters are optional - this table shows which apply based on target type. The table includes the following columns: Target group : This column is either a target's name, or a derived name from a group of related targets (step-ahead ones whose step ahead increment is in the name). # Targets : How many targets are in the group, or 1 if not a group. Type : The target's type . Unit : E.g., \"percent\" or \"week\". Unit is used when previewing data, and when downloading it. (Be aware that it can be confusing having both unit objects as above along with a specific target's unit.) Step Ahead? : Shows two pieces of information: 1) Whether the target is a \"step ahead\" one, and (if so) 2) what the \"step ahead increment\" is. (Step ahead targets are used to predict values in the future, and are used by some analysis tools.) Example Target : A specific target's name if a group, or the one target's name otherwise.","title":"Targets"},{"location":"ProjectDetailPage/#time-zeros","text":"This section details the project's time zeros . (See Concepts for more about time zeros.) It has these columns: Time zero : The date from which a forecast originates and to which targets are relative (i.e. a \"2-week-ahead forecast\" is two weeks ahead of the time zero). Every forecast has a time zero. See Concepts for more about time zeros. Data version date : An optional piece of metadata for a forecast. If it exists, it is associated with a time zero. It refers to the latest date at which any data source used for the forecasts should be considered. If present, it can be used externally by system users to recreate model results by \"rolling back\" the core data to a particular state. # Forecasts : A count of the number of forecasts for this time zero. Starts Season : Shows two pieces of information: 1) Whether the time zero is starts a season (it is blank if it does not start a season), and 2) the season name itself (which indicates that the time zero does start a season.)","title":"Time zeros"},{"location":"ProjectExplorerPage/","text":"Project explorer page \u00b6 Reached via the project detail page 's Features section, this page has two tabs that show unit and target summaries for each model in the project, respectively, along with a link to the model's latest forecast. Latest units tab \u00b6 Latest targets tab \u00b6","title":"Project explorer page"},{"location":"ProjectExplorerPage/#project-explorer-page","text":"Reached via the project detail page 's Features section, this page has two tabs that show unit and target summaries for each model in the project, respectively, along with a link to the model's latest forecast.","title":"Project explorer page"},{"location":"ProjectExplorerPage/#latest-units-tab","text":"","title":"Latest units tab"},{"location":"ProjectExplorerPage/#latest-targets-tab","text":"","title":"Latest targets tab"},{"location":"Projects/","text":"Manging Projects \u00b6 Projects are the central organizing concept in Zoltar. They define the units , targets and time zeros that forecasts are relative to, and contain the forecast models that teams use to represent a forecasting challenge. Described here are the common operations done with projects. Note that you must have a Zoltar account to create a project, and only project owners can edit or delete projects. (Fill out the Zoltardata.com user request form to be added to our beta-tester invitation queue.) Create a project \u00b6 There are two ways to create a project: by editing a form or by uploading a JSON project configuration file. Using a form is a quick way to make a project to get a team started, but is very limited in what can be specified, mainly the information in the Details table as described in the link above (name, visibility, time interval type, description, home URL, core data, logo url, and model owners). The second method - using a configuration file - is preferred as it allows specifying all aspects of a project. Both methods are accessed via the green \"New\" dropdown button at the top of the Projects page . To create a project via a form: \u00b6 Click the green \"New\" button at the top of the projects list and select \"From form...\" Fill in the fields and click \"Create\". Most fields are required, which will be indicated with error messages when you submit the form and any are missing. To create a project via a configuration file: \u00b6 Click the green \"New\" dropdown button at the top of the projects list and select \"From file...\" In the dialog that appears, click the \"Browse...\" button to select a project configuration JSON file. Click the green upload button. Depending on the file you uploaded you will see either a message noting success (\"Created project __\" message at the top of the page) or an error page with a message showing the details. It may be helpful to get started by downloading and modifying an existing project's configuration file: Go to the project of interest's detail page . At the top, to the right of the project name, click the green download \"Config\" button and save the file. Note that the id and url fields in the downloaded file are ignored when creating a new project from that file, and can safely be edited out when creating your new file. Edit a project \u00b6 There are two ways to edit a project, similar to creating one as described above: by editing a form or by uploading an edited version of the original JSON project configuration file that was used to create the project. Both are accessed from the project's detail page using the green \"Edit\" dropdown button to the right of the project name. To edit a project via a form: \u00b6 Click the green \"Edit\" dropdown button at the top of the projects list and select \"From form...\" Edit the fields as above and then click \"Save\". To edit a project via a configuration file: \u00b6 Click the green \"Edit\" dropdown button at the top of the projects list and select \"From file...\" In the dialog that appears, click the \"Browse...\" button to select a project configuration JSON file. Click the green edit button. This invokes a kind of \"diff\" analysis that compares the uploaded file to the to-be-edited project's current structure. The result is shown on a \"Confirm project configuration changes\" page listing the changes you're about to apply. (You will see an error page if there's a problem with the uploaded file.) The confirmation page has three possible sections: A sentence at the top summarizing the changes, including whether any will delete data. All changes : All changes that were detected, including both non-data-destructive and destructive ones. Changes that will delete data : Lists just the data-destructive changes, including details about what kinds of predictions (or truth) will be deleted, and how many of each. Here's an example: The diff function categorizes each change according to the type of change and what item it applies to. For example, the first change under All changes in the above screen shot is the editing of the project's \"name\" field. Another change is the third one in that list, which is the removal of the unit named \"location3\". Here are all the kinds of change that might be identified: OBJ_ADDED : An item of a particular type will be added to the project. For example, adding a new unit named \"location4\". OBJ_REMOVED : \"\" will be removed \"\" from a project. Removing the target \"pct next week\", say. FIELD_EDITED : An item's field will be set to a new value. For example, setting the \"data_version_date\" of the project's time zero named \"2011-10-09\". FIELD_ADDED : Set an item's field that was not set before. Adding a \"season_name\" to the time zero \"2011-10-16\", say. FIELD_REMOVED : Remove an item's field, such as the \"step_ahead_increment\" of the target \"cases next week\".\" As implied above, there are four types of item that can be changed: The project itself or one of its units , targets , or time zeros . Delete a project \u00b6 Finally, to delete a project: Go to the project of interest's detail page . At the top, to the right of the project name, click the red delete trash can button and then click \"Delete\" in the confirmation dialog that appears. Note that this cannot be undone!","title":"Projects"},{"location":"Projects/#manging-projects","text":"Projects are the central organizing concept in Zoltar. They define the units , targets and time zeros that forecasts are relative to, and contain the forecast models that teams use to represent a forecasting challenge. Described here are the common operations done with projects. Note that you must have a Zoltar account to create a project, and only project owners can edit or delete projects. (Fill out the Zoltardata.com user request form to be added to our beta-tester invitation queue.)","title":"Manging Projects"},{"location":"Projects/#create-a-project","text":"There are two ways to create a project: by editing a form or by uploading a JSON project configuration file. Using a form is a quick way to make a project to get a team started, but is very limited in what can be specified, mainly the information in the Details table as described in the link above (name, visibility, time interval type, description, home URL, core data, logo url, and model owners). The second method - using a configuration file - is preferred as it allows specifying all aspects of a project. Both methods are accessed via the green \"New\" dropdown button at the top of the Projects page .","title":"Create a project"},{"location":"Projects/#to-create-a-project-via-a-form","text":"Click the green \"New\" button at the top of the projects list and select \"From form...\" Fill in the fields and click \"Create\". Most fields are required, which will be indicated with error messages when you submit the form and any are missing.","title":"To create a project via a form:"},{"location":"Projects/#to-create-a-project-via-a-configuration-file","text":"Click the green \"New\" dropdown button at the top of the projects list and select \"From file...\" In the dialog that appears, click the \"Browse...\" button to select a project configuration JSON file. Click the green upload button. Depending on the file you uploaded you will see either a message noting success (\"Created project __\" message at the top of the page) or an error page with a message showing the details. It may be helpful to get started by downloading and modifying an existing project's configuration file: Go to the project of interest's detail page . At the top, to the right of the project name, click the green download \"Config\" button and save the file. Note that the id and url fields in the downloaded file are ignored when creating a new project from that file, and can safely be edited out when creating your new file.","title":"To create a project via a configuration file:"},{"location":"Projects/#edit-a-project","text":"There are two ways to edit a project, similar to creating one as described above: by editing a form or by uploading an edited version of the original JSON project configuration file that was used to create the project. Both are accessed from the project's detail page using the green \"Edit\" dropdown button to the right of the project name.","title":"Edit a project"},{"location":"Projects/#to-edit-a-project-via-a-form","text":"Click the green \"Edit\" dropdown button at the top of the projects list and select \"From form...\" Edit the fields as above and then click \"Save\".","title":"To edit a project via a form:"},{"location":"Projects/#to-edit-a-project-via-a-configuration-file","text":"Click the green \"Edit\" dropdown button at the top of the projects list and select \"From file...\" In the dialog that appears, click the \"Browse...\" button to select a project configuration JSON file. Click the green edit button. This invokes a kind of \"diff\" analysis that compares the uploaded file to the to-be-edited project's current structure. The result is shown on a \"Confirm project configuration changes\" page listing the changes you're about to apply. (You will see an error page if there's a problem with the uploaded file.) The confirmation page has three possible sections: A sentence at the top summarizing the changes, including whether any will delete data. All changes : All changes that were detected, including both non-data-destructive and destructive ones. Changes that will delete data : Lists just the data-destructive changes, including details about what kinds of predictions (or truth) will be deleted, and how many of each. Here's an example: The diff function categorizes each change according to the type of change and what item it applies to. For example, the first change under All changes in the above screen shot is the editing of the project's \"name\" field. Another change is the third one in that list, which is the removal of the unit named \"location3\". Here are all the kinds of change that might be identified: OBJ_ADDED : An item of a particular type will be added to the project. For example, adding a new unit named \"location4\". OBJ_REMOVED : \"\" will be removed \"\" from a project. Removing the target \"pct next week\", say. FIELD_EDITED : An item's field will be set to a new value. For example, setting the \"data_version_date\" of the project's time zero named \"2011-10-09\". FIELD_ADDED : Set an item's field that was not set before. Adding a \"season_name\" to the time zero \"2011-10-16\", say. FIELD_REMOVED : Remove an item's field, such as the \"step_ahead_increment\" of the target \"cases next week\".\" As implied above, there are four types of item that can be changed: The project itself or one of its units , targets , or time zeros .","title":"To edit a project via a configuration file:"},{"location":"Projects/#delete-a-project","text":"Finally, to delete a project: Go to the project of interest's detail page . At the top, to the right of the project name, click the red delete trash can button and then click \"Delete\" in the confirmation dialog that appears. Note that this cannot be undone!","title":"Delete a project"},{"location":"ReleaseNotes4_0/","text":"Welcome to Zoltar 4! \u00b6 Zoltar version 4 is a major upgrade to Zoltar's fundamental forecast data representation, enabling new forecast versioning features. Read on for details. Forecast versioning \u00b6 Recall that the version of Zoltar prior to this new one added support for storing forecast versions. From the new Forecast Versions page: Forecasts in Zoltar can be versioned . A version is identified by the combination of the forecast's model , time zero , and issue date . Multiple versions for the same model and time zero will have different issue dates. These can be identified by the gray version numbering shown in the version column on the model detail page 's Forecasts list (e.g., \"1 of 2\"), and on the Issue date row of the forecast detail page 's information table at the top (e.g., \"(Version 3 of 3)\"). Data migration \u00b6 This upgrade required migrating existing data, which we've done, but which resulted in a few forecasts that needed modifying. We've notified individual modelers of any problematic ones. Forecast version rules \u00b6 We now enforce these version rules : No uploaded forecast can have no rows of data. No uploaded forecast can load 100% duplicate data of a previous version. New forecast versions cannot imply any retracted prediction elements in existing versions, i.e., you cannot load data that's a subset of the previous forecast's data. New forecast versions cannot be positioned before any existing versions. Editing a version's issue_date cannot reposition it before any existing forecasts. Deleted forecasts cannot be positioned before any newer versions. Bullet three means we require forecasts to be uploaded in issue_date order. If you need to back-fill older versions, you'll first have to delete forecasts with newer issue_dates before uploading older ones. Skipping of duplicate forecast data \u00b6 Zoltar now implements a space optimization where duplicate data between forecast versions is not saved on disk. The forecast query feature hides this from users by reassembling the data as needed. Forecast retractions \u00b6 Zoltar now supports the notion of \"retracting\" forecasts. Such retractions mark individual prediction elements so that the as_of forecast query parameter hides those predictions. The retracted data is not deleted, and earlier as_of values will still return that data when passing an as_of value that is prior to the retraction. From the Retracted predictions page: Zoltar supports retracting individual prediction elements. A retracted element marks a particular combination of unit, target, and prediction type to be ignored when executing a forecast query if the user passes an as_of value that's on or later than the retraction issue_date . In that case there will be no value returned for the retracted prediction element. However, an as_of that's earlier than the forecast's issue_date will result in the element's pre-retraction value being returned. Users who want to return the forecast's original data including retractions, should use the API or web UI as documented in download a single forecast . In this case Zoltar will include retractions as they were uploaded - with null \"prediction\" value in the JSON (see below). For users of the quantile forecast CSV format: Retractions are indicated in quantile CSV files by NULL point and quantile values. The libraries take care of converting these into the JSON below. See Quantile forecast format (CSV) for quantile retraction format details.","title":"Zoltar 4 Release Notes"},{"location":"ReleaseNotes4_0/#welcome-to-zoltar-4","text":"Zoltar version 4 is a major upgrade to Zoltar's fundamental forecast data representation, enabling new forecast versioning features. Read on for details.","title":"Welcome to Zoltar 4!"},{"location":"ReleaseNotes4_0/#forecast-versioning","text":"Recall that the version of Zoltar prior to this new one added support for storing forecast versions. From the new Forecast Versions page: Forecasts in Zoltar can be versioned . A version is identified by the combination of the forecast's model , time zero , and issue date . Multiple versions for the same model and time zero will have different issue dates. These can be identified by the gray version numbering shown in the version column on the model detail page 's Forecasts list (e.g., \"1 of 2\"), and on the Issue date row of the forecast detail page 's information table at the top (e.g., \"(Version 3 of 3)\").","title":"Forecast versioning"},{"location":"ReleaseNotes4_0/#data-migration","text":"This upgrade required migrating existing data, which we've done, but which resulted in a few forecasts that needed modifying. We've notified individual modelers of any problematic ones.","title":"Data migration"},{"location":"ReleaseNotes4_0/#forecast-version-rules","text":"We now enforce these version rules : No uploaded forecast can have no rows of data. No uploaded forecast can load 100% duplicate data of a previous version. New forecast versions cannot imply any retracted prediction elements in existing versions, i.e., you cannot load data that's a subset of the previous forecast's data. New forecast versions cannot be positioned before any existing versions. Editing a version's issue_date cannot reposition it before any existing forecasts. Deleted forecasts cannot be positioned before any newer versions. Bullet three means we require forecasts to be uploaded in issue_date order. If you need to back-fill older versions, you'll first have to delete forecasts with newer issue_dates before uploading older ones.","title":"Forecast version rules"},{"location":"ReleaseNotes4_0/#skipping-of-duplicate-forecast-data","text":"Zoltar now implements a space optimization where duplicate data between forecast versions is not saved on disk. The forecast query feature hides this from users by reassembling the data as needed.","title":"Skipping of duplicate forecast data"},{"location":"ReleaseNotes4_0/#forecast-retractions","text":"Zoltar now supports the notion of \"retracting\" forecasts. Such retractions mark individual prediction elements so that the as_of forecast query parameter hides those predictions. The retracted data is not deleted, and earlier as_of values will still return that data when passing an as_of value that is prior to the retraction. From the Retracted predictions page: Zoltar supports retracting individual prediction elements. A retracted element marks a particular combination of unit, target, and prediction type to be ignored when executing a forecast query if the user passes an as_of value that's on or later than the retraction issue_date . In that case there will be no value returned for the retracted prediction element. However, an as_of that's earlier than the forecast's issue_date will result in the element's pre-retraction value being returned. Users who want to return the forecast's original data including retractions, should use the API or web UI as documented in download a single forecast . In this case Zoltar will include retractions as they were uploaded - with null \"prediction\" value in the JSON (see below). For users of the quantile forecast CSV format: Retractions are indicated in quantile CSV files by NULL point and quantile values. The libraries take care of converting these into the JSON below. See Quantile forecast format (CSV) for quantile retraction format details.","title":"Forecast retractions"},{"location":"ReleaseNotes4_1/","text":"Welcome to Zoltar 4.1 \u00b6 Zoltar version 4.1 upgrades Zoltar's forecast versioning to support datetime versions rather than date ones. This allows multiple versions for a particular date, as requested by users. Forecast versioning \u00b6 Recall that the version of Zoltar prior to this new one added support for storing forecast versions. From the new Forecast Versions page: Forecasts in Zoltar can be versioned . A version is identified by the combination of the forecast's model , time zero , and issued_at fields. Multiple versions for the same model and time zero will have different issued_at values. These can be identified by the gray version numbering shown in the version column on the model detail page 's Forecasts list (e.g., \"1 of 2\"), and on the Issued at row of the forecast detail page 's information table at the top (e.g., \"(Version 3 of 3)\"). Data migration \u00b6 This upgrade required migrating existing forecasts' issue_date dates to issued_at timezone-aware datetimes. We arbitrarily chose 12 noon UTC as the time of day.","title":"Zoltar 4.1 Release Notes"},{"location":"ReleaseNotes4_1/#welcome-to-zoltar-41","text":"Zoltar version 4.1 upgrades Zoltar's forecast versioning to support datetime versions rather than date ones. This allows multiple versions for a particular date, as requested by users.","title":"Welcome to Zoltar 4.1"},{"location":"ReleaseNotes4_1/#forecast-versioning","text":"Recall that the version of Zoltar prior to this new one added support for storing forecast versions. From the new Forecast Versions page: Forecasts in Zoltar can be versioned . A version is identified by the combination of the forecast's model , time zero , and issued_at fields. Multiple versions for the same model and time zero will have different issued_at values. These can be identified by the gray version numbering shown in the version column on the model detail page 's Forecasts list (e.g., \"1 of 2\"), and on the Issued at row of the forecast detail page 's information table at the top (e.g., \"(Version 3 of 3)\").","title":"Forecast versioning"},{"location":"ReleaseNotes4_1/#data-migration","text":"This upgrade required migrating existing forecasts' issue_date dates to issued_at timezone-aware datetimes. We arbitrarily chose 12 noon UTC as the time of day.","title":"Data migration"},{"location":"ReleaseNotes4_2/","text":"Welcome to Zoltar 4.2 \u00b6 Zoltar version 4.2 upgrades Zoltar's truth storage to support versions, aka \"batches\", along with as_of truth query support. Please see: How truth is represented in Zoltar Querying a project's truth","title":"Zoltar 4.2 Release Notes"},{"location":"ReleaseNotes4_2/#welcome-to-zoltar-42","text":"Zoltar version 4.2 upgrades Zoltar's truth storage to support versions, aka \"batches\", along with as_of truth query support. Please see: How truth is represented in Zoltar Querying a project's truth","title":"Welcome to Zoltar 4.2"},{"location":"Targets/","text":"Forecast Targets in Zoltar \u00b6 Targets are the fundamental data structure of a forecast. In Zoltar, a single forecast made by a model may give predictions for multiple targets. For example, a single forecast might include a forecast of 1- and 2-week-ahead values and a prediction of when the time series will reach its maximum in a given period of time. When a project is created, the project owner specifies which targets should be part of any submitted forecast. As we will see below, targets have specific properties, and there are several different types of targets that determine which properties and features pertain to a particular target. Target types \u00b6 continuous : A quantitative target whose range encapsulates a section of the real number line. Examples: percentage of all doctors' office visits due to influenza like-illness, or disease incidence per 100,000 population. discrete : A quantitative target whose range is a set of integer values. Example: the number of incident cases in a time period. nominal : A nominal, unordered categorical target. Example: severity level in categories of \"low\", \"moderate\", and \"high\". binary : A binary target, with a defined outcome that can be seen as a true/false. Example: does the maximum value of a variable exceed some threshold C in a given period of time. date : A target with a discrete set of calendar dates as possible outcomes. Example: the calendar week in which peak incidence occurs (represented by the Sunday of that week. Target parameters \u00b6 When created, all targets have a set of parameters that must be defined. Each type of target then has a set of additional, sometimes, optional parameters. These are all defined below. Summary of allowed, optional, and required parameters, by target type \u00b6 Here is a table that summarizes which are allowed, optional, and required, by type. legend: 'x' = required, '(x)' = required if is_step_ahead is true , '-' = disallowed, '~' = optional. target type type name description is_step_ahead step_ahead_increment unit range cats continuous x x x x (x) x ~ ~ discrete x x x x (x) x ~ ~ nominal x x x x (x) - - x binary x x x x (x) - - - date x x x x (x) x - x Required parameters for all targets \u00b6 name : A brief name for the target. (The number of characters is not limited, but brevity is helpful.) description : A verbose description of what the target is. (The number of characters is not limited.) type : One of the five target types named above, e.g., continuous . is_step_ahead : true if the target is one of a sequence of targets that predict values at different points in the future. step_ahead_increment : An integer, indicating the forecast horizon represented by this target. It is required if is_step_ahead is true . Parameters specific to continuous targets \u00b6 unit : (Required) E.g., \"percent\" or \"week\". range : (Optional) a numeric vector of length 2 specifying a lower and upper bound of a range for the continuous target. The range is assumed to be inclusive on the lower bound and open on the upper bound, e.g. [a, b). If range is not specified than range is assumed to be (-infty, infty). cats : (Optional, but uploaded Bin prediction types will be rejected unless these are specified) an ordered set of numeric values indicating the inclusive lower-bounds for the bins of binned distributions. E.g. if cats is specified as [0, 1.1, 2.2] then the implied set of valid intervals would be [0,1.1), [1.1,2.2) and [2.2, \\infty). Additionally, if range had been specified as [0, 100] in addition to the above cats , then the final bin would be [2.2, 100]. If both range and cats are specified, then min( cats ) must equal the lower bound and max( cats ) must be less than the upper bound of range . Parameters specific to discrete targets \u00b6 unit : (Required) E.g., \"cases\". range : (Optional, but uploaded Bin prediction types will be rejected unless range is specified) an integer vector of length 2 specifying a lower and upper bound of a range for the continuous target. The range is assumed to be inclusive on both the lower and upper bounds, e.g. [a, b]. If range is not specified than range is assumed to be (-infty, infty). cats : (Optional, and can only be specified if range is also specified) an ordered set of integer values indicating the inclusive lower-bounds for the bins of binned distributions. E.g. if cats is specified as [0, 10, 20, 30, 40, 50] and range is specified as [0, 100] then the implied set of valid categories would be [0,10), [10, 20), [20, 30), [30, 40), [40, 50) and [50, 100]. If both range and cats are specified, then min( cats ) must equal the lower bound and max( cats ) must be less than the upper bound of range . Parameters specific to nominal targets \u00b6 cats : (Required) a list of strings that name the categories for this target. Categories must not include the following strings: \"\" , \"NA\" , or \"NULL\" (case does not matter). Parameters specific to binary targets \u00b6 None. Parameters specific to date targets \u00b6 unit : (Required) The unit parameter from the set of parameters required for all targets has a special meaning and use for date targets. It is required to be one of \"month\", \"week\", \"biweek\", or \"day\". This parameter specifies the units of the date target and how certain calculations are performed for dates. All inputs for date targets are required to be in the standard ISO YYYY-MM-DD date format. Note: to map dates to biweeks, we use the definitions as presented in Reich et al (2017) . cats : (Required) a list of dates in YYYY-MM-DD format. These are the only dates that will be considered as valid input for the target. Valid prediction types by target type \u00b6 target type data_type point bin sample named quantile continuous float x x x (1) x discrete int x x x (2) x nominal text x x x - - binary boolean x x x - - date date x x x - x Legend: (1) = valid named distributions are norm , lnorm , gamma , beta (2) = valid named distributions are pois , nbinom , nbinom2","title":"Targets"},{"location":"Targets/#forecast-targets-in-zoltar","text":"Targets are the fundamental data structure of a forecast. In Zoltar, a single forecast made by a model may give predictions for multiple targets. For example, a single forecast might include a forecast of 1- and 2-week-ahead values and a prediction of when the time series will reach its maximum in a given period of time. When a project is created, the project owner specifies which targets should be part of any submitted forecast. As we will see below, targets have specific properties, and there are several different types of targets that determine which properties and features pertain to a particular target.","title":"Forecast Targets in Zoltar"},{"location":"Targets/#target-types","text":"continuous : A quantitative target whose range encapsulates a section of the real number line. Examples: percentage of all doctors' office visits due to influenza like-illness, or disease incidence per 100,000 population. discrete : A quantitative target whose range is a set of integer values. Example: the number of incident cases in a time period. nominal : A nominal, unordered categorical target. Example: severity level in categories of \"low\", \"moderate\", and \"high\". binary : A binary target, with a defined outcome that can be seen as a true/false. Example: does the maximum value of a variable exceed some threshold C in a given period of time. date : A target with a discrete set of calendar dates as possible outcomes. Example: the calendar week in which peak incidence occurs (represented by the Sunday of that week.","title":"Target types"},{"location":"Targets/#target-parameters","text":"When created, all targets have a set of parameters that must be defined. Each type of target then has a set of additional, sometimes, optional parameters. These are all defined below.","title":"Target parameters"},{"location":"Targets/#summary-of-allowed-optional-and-required-parameters-by-target-type","text":"Here is a table that summarizes which are allowed, optional, and required, by type. legend: 'x' = required, '(x)' = required if is_step_ahead is true , '-' = disallowed, '~' = optional. target type type name description is_step_ahead step_ahead_increment unit range cats continuous x x x x (x) x ~ ~ discrete x x x x (x) x ~ ~ nominal x x x x (x) - - x binary x x x x (x) - - - date x x x x (x) x - x","title":"Summary of allowed, optional, and required parameters, by target type"},{"location":"Targets/#required-parameters-for-all-targets","text":"name : A brief name for the target. (The number of characters is not limited, but brevity is helpful.) description : A verbose description of what the target is. (The number of characters is not limited.) type : One of the five target types named above, e.g., continuous . is_step_ahead : true if the target is one of a sequence of targets that predict values at different points in the future. step_ahead_increment : An integer, indicating the forecast horizon represented by this target. It is required if is_step_ahead is true .","title":"Required parameters for all targets"},{"location":"Targets/#parameters-specific-to-continuous-targets","text":"unit : (Required) E.g., \"percent\" or \"week\". range : (Optional) a numeric vector of length 2 specifying a lower and upper bound of a range for the continuous target. The range is assumed to be inclusive on the lower bound and open on the upper bound, e.g. [a, b). If range is not specified than range is assumed to be (-infty, infty). cats : (Optional, but uploaded Bin prediction types will be rejected unless these are specified) an ordered set of numeric values indicating the inclusive lower-bounds for the bins of binned distributions. E.g. if cats is specified as [0, 1.1, 2.2] then the implied set of valid intervals would be [0,1.1), [1.1,2.2) and [2.2, \\infty). Additionally, if range had been specified as [0, 100] in addition to the above cats , then the final bin would be [2.2, 100]. If both range and cats are specified, then min( cats ) must equal the lower bound and max( cats ) must be less than the upper bound of range .","title":"Parameters specific to continuous targets"},{"location":"Targets/#parameters-specific-to-discrete-targets","text":"unit : (Required) E.g., \"cases\". range : (Optional, but uploaded Bin prediction types will be rejected unless range is specified) an integer vector of length 2 specifying a lower and upper bound of a range for the continuous target. The range is assumed to be inclusive on both the lower and upper bounds, e.g. [a, b]. If range is not specified than range is assumed to be (-infty, infty). cats : (Optional, and can only be specified if range is also specified) an ordered set of integer values indicating the inclusive lower-bounds for the bins of binned distributions. E.g. if cats is specified as [0, 10, 20, 30, 40, 50] and range is specified as [0, 100] then the implied set of valid categories would be [0,10), [10, 20), [20, 30), [30, 40), [40, 50) and [50, 100]. If both range and cats are specified, then min( cats ) must equal the lower bound and max( cats ) must be less than the upper bound of range .","title":"Parameters  specific to discrete targets"},{"location":"Targets/#parameters-specific-to-nominal-targets","text":"cats : (Required) a list of strings that name the categories for this target. Categories must not include the following strings: \"\" , \"NA\" , or \"NULL\" (case does not matter).","title":"Parameters  specific to nominal targets"},{"location":"Targets/#parameters-specific-to-binary-targets","text":"None.","title":"Parameters  specific to binary targets"},{"location":"Targets/#parameters-specific-to-date-targets","text":"unit : (Required) The unit parameter from the set of parameters required for all targets has a special meaning and use for date targets. It is required to be one of \"month\", \"week\", \"biweek\", or \"day\". This parameter specifies the units of the date target and how certain calculations are performed for dates. All inputs for date targets are required to be in the standard ISO YYYY-MM-DD date format. Note: to map dates to biweeks, we use the definitions as presented in Reich et al (2017) . cats : (Required) a list of dates in YYYY-MM-DD format. These are the only dates that will be considered as valid input for the target.","title":"Parameters  specific to date targets"},{"location":"Targets/#valid-prediction-types-by-target-type","text":"target type data_type point bin sample named quantile continuous float x x x (1) x discrete int x x x (2) x nominal text x x x - - binary boolean x x x - - date date x x x - x Legend: (1) = valid named distributions are norm , lnorm , gamma , beta (2) = valid named distributions are pois , nbinom , nbinom2","title":"Valid prediction types by target type"},{"location":"Truth/","text":"Ground truth \u00b6 How truth is represented in Zoltar \u00b6 Zoltar supports storing ground truth data for each project that desires to do scoring. Before describing details below about managing truth, we need to lay out how Zoltar stores truth and how it supports truth versioning. When a truth file is loaded (see file format information below), Zoltar groups the input rows (point predictions) by timezero and then loads all predictions for each timezero into one forecast in an internally-managed \"oracle\" model. This results in a group of forecasts that stemmed from the same truth file, and we call this group a \"batch\". The loader sets all the oracle forecasts for a particular batch to have the same source and issued_at fields, and that 2-tuple is how we identify batches. (Unlike user-created models, the oracle model is not directly worked with; it's all handled through truth-specific functionality, but you will see oracle and batch information in the user interface.) Because truth is stored as Zoltar forecasts, truth versioning is supported: each uploaded batch represents a version. Manging truth data \u00b6 Truth data is specified as a CSV file as documented in Truth data format , and each project is responsible for generating the CSV file for their particular set of time zeros , units and targets . You can tell whether truth has been uploaded to a project by looking at the Truth Data row in the Project details table section of the project detail page . It will either be a link with the truth data file name (which means truth is present) and information about the latest version uploaded (AKA a \"batch\" described above) in parentheses, or a (No truth data) link if not truth has been loaded. Clicking on the link takes you to the Truth detail page documented in Truth detail page below where you can browse, upload, and download truth, depending on your permissions. Here's a screen shot showing a project where truth has been uploaded (circled in red). You can see that two truth file versions have been loaded, resulting in two batches of oracle forecasts. The issue date of the latest batch is shown: Following are operations on truth data that you can do from within the Zoltar UI. View truth details \u00b6 Clicking on the truth link above takes you to the truth details page: Here you see a small information table at the top showing how many truth files/batches have been uploaded, a link to the oracle model (so you can see the individual oracle forecasts if need be), and an optional \"Upload\" form if you have permission to upload. Following that information is a \"Batches\" table showing information about each truth file that's been loaded, and how many oracle forecasts were loaded from the file. Finally, a \"Delete Latest\" button is show if you have permission to delete truth. Due to Zoltar's forecast version rules , only the latest batch can be deleted. Upload truth \u00b6 Follow these steps to upload a truth CSV file: Go to the Truth detail page of the project of interest. Click the \"Browse...\" button in the Upload row. In the dialog that appears, select a truth data CSV file in Zoltar's Truth data format . Click the green upload button. If the file is OK then you will be taken to an upload file job detail page that shows the status of your upload, with the message \"Queued the truth file _ for uploading.\", where _ is your file's name. See Check an upload's status below for this page's details. Once the upload is successful (you can refresh the upload file job page to check) then you will the file name as a link as described above. If there was a problem uploading then you will see the upload's status as FAILED . The Failure section will provide some information to help debug the problem. Download truth \u00b6 Here are the steps to download a project's truth data as a CSV file in Zoltar's Truth data format : Go to the project detail page of the project of interest. Click the truth link above go to the Truth detail page page. Click the 1. Click the \"Download CSV\" button and save the file. Delete truth \u00b6 To delete a project's truth data, use the \"Delete Latest\" button described above.","title":"Truth"},{"location":"Truth/#ground-truth","text":"","title":"Ground truth"},{"location":"Truth/#how-truth-is-represented-in-zoltar","text":"Zoltar supports storing ground truth data for each project that desires to do scoring. Before describing details below about managing truth, we need to lay out how Zoltar stores truth and how it supports truth versioning. When a truth file is loaded (see file format information below), Zoltar groups the input rows (point predictions) by timezero and then loads all predictions for each timezero into one forecast in an internally-managed \"oracle\" model. This results in a group of forecasts that stemmed from the same truth file, and we call this group a \"batch\". The loader sets all the oracle forecasts for a particular batch to have the same source and issued_at fields, and that 2-tuple is how we identify batches. (Unlike user-created models, the oracle model is not directly worked with; it's all handled through truth-specific functionality, but you will see oracle and batch information in the user interface.) Because truth is stored as Zoltar forecasts, truth versioning is supported: each uploaded batch represents a version.","title":"How truth is represented in Zoltar"},{"location":"Truth/#manging-truth-data","text":"Truth data is specified as a CSV file as documented in Truth data format , and each project is responsible for generating the CSV file for their particular set of time zeros , units and targets . You can tell whether truth has been uploaded to a project by looking at the Truth Data row in the Project details table section of the project detail page . It will either be a link with the truth data file name (which means truth is present) and information about the latest version uploaded (AKA a \"batch\" described above) in parentheses, or a (No truth data) link if not truth has been loaded. Clicking on the link takes you to the Truth detail page documented in Truth detail page below where you can browse, upload, and download truth, depending on your permissions. Here's a screen shot showing a project where truth has been uploaded (circled in red). You can see that two truth file versions have been loaded, resulting in two batches of oracle forecasts. The issue date of the latest batch is shown: Following are operations on truth data that you can do from within the Zoltar UI.","title":"Manging truth data"},{"location":"Truth/#view-truth-details","text":"Clicking on the truth link above takes you to the truth details page: Here you see a small information table at the top showing how many truth files/batches have been uploaded, a link to the oracle model (so you can see the individual oracle forecasts if need be), and an optional \"Upload\" form if you have permission to upload. Following that information is a \"Batches\" table showing information about each truth file that's been loaded, and how many oracle forecasts were loaded from the file. Finally, a \"Delete Latest\" button is show if you have permission to delete truth. Due to Zoltar's forecast version rules , only the latest batch can be deleted.","title":"View truth details"},{"location":"Truth/#upload-truth","text":"Follow these steps to upload a truth CSV file: Go to the Truth detail page of the project of interest. Click the \"Browse...\" button in the Upload row. In the dialog that appears, select a truth data CSV file in Zoltar's Truth data format . Click the green upload button. If the file is OK then you will be taken to an upload file job detail page that shows the status of your upload, with the message \"Queued the truth file _ for uploading.\", where _ is your file's name. See Check an upload's status below for this page's details. Once the upload is successful (you can refresh the upload file job page to check) then you will the file name as a link as described above. If there was a problem uploading then you will see the upload's status as FAILED . The Failure section will provide some information to help debug the problem.","title":"Upload truth"},{"location":"Truth/#download-truth","text":"Here are the steps to download a project's truth data as a CSV file in Zoltar's Truth data format : Go to the project detail page of the project of interest. Click the truth link above go to the Truth detail page page. Click the 1. Click the \"Download CSV\" button and save the file.","title":"Download truth"},{"location":"Truth/#delete-truth","text":"To delete a project's truth data, use the \"Delete Latest\" button described above.","title":"Delete truth"},{"location":"TruthQueryFormat/","text":"Querying a project's truth \u00b6 Truth can be downloaded from the web UI as described in Download truth or through the API. The workflow is identical to downloading forecasts as described at forecast query format page) except for the following. (Note: data limits are the same as querying forecasts.) Query format \u00b6 The format is identical to querying forecasts except that only the four fields units , targets , timezeros , and as_of are allowed, which function identically. Here's a full example: {\"units\": [\"US\"], \"targets\": [\"0 day ahead cum death\", \"1 day ahead cum death\"], \"timezeros\": [\"2020-05-14\", \"2020-05-09\"], \"as_of\": \"2021-05-10 12:00 UTC \" } Data format \u00b6 The truth is returned in the CSV format documented at Truth data format (CSV) .","title":"Truth Query Format"},{"location":"TruthQueryFormat/#querying-a-projects-truth","text":"Truth can be downloaded from the web UI as described in Download truth or through the API. The workflow is identical to downloading forecasts as described at forecast query format page) except for the following. (Note: data limits are the same as querying forecasts.)","title":"Querying a project's truth"},{"location":"TruthQueryFormat/#query-format","text":"The format is identical to querying forecasts except that only the four fields units , targets , timezeros , and as_of are allowed, which function identically. Here's a full example: {\"units\": [\"US\"], \"targets\": [\"0 day ahead cum death\", \"1 day ahead cum death\"], \"timezeros\": [\"2020-05-14\", \"2020-05-09\"], \"as_of\": \"2021-05-10 12:00 UTC \" }","title":"Query format"},{"location":"TruthQueryFormat/#data-format","text":"The truth is returned in the CSV format documented at Truth data format (CSV) .","title":"Data format"},{"location":"UserIntro/","text":"User guide \u00b6 This section is a how-to for common Zoltar tasks. Use the navigation sidebar to go to the section of interest. Note that many of the operations you can do via the web interface can also be accomplished prgammatically via the Zoltar API .","title":"Introduction"},{"location":"UserIntro/#user-guide","text":"This section is a how-to for common Zoltar tasks. Use the navigation sidebar to go to the section of interest. Note that many of the operations you can do via the web interface can also be accomplished prgammatically via the Zoltar API .","title":"User guide"},{"location":"Validation/","text":"Forecast validation \u00b6 Forecasts stored in Zoltar are validated upon upload based on the expected structure of each forecast. Below, we document the checks and tests that are performed on all forecasts. We first list the test that is performed for every prediction, and after that, tests are broken down by the class of prediction. Definitions \u00b6 For clarity, we define specific terms that we will use below. Forecast: a collection of data specific to a project > model > timezero. Prediction: a group of a prediction elements(s) specific to a location and target. Prediction Element: data that define a unique single prediction, specific to the class of prediction it is. Prediction Class: data structures representing different types of predictions, e.g. \"Point\" and \"Bin\" (see Data Model for more detail) Target Type: the classification for a specific forecast target, one of \"continuous\", \"discrete\", \"nominal\", \"binary\" or \"date\" (see Targets for more info) Database Row(s): the entry(ies)/row(s) in the database that comprise a prediction element. Tests for all Prediction Elements \u00b6 These tests are performed when a forecast is created or updated. The Prediction's class must be valid for its target's type (see Valid prediction types by target type . Within a Prediction, there cannot be more than 1 Prediction Element of the same class. Tests for Prediction Elements by Prediction Class \u00b6 These tests are performed when a forecast is created or updated. Bin Prediction Elements \u00b6 If a Bin Prediction Element exists, it should have >=1 Database Rows. |cat| = |prob| . The number of elements in the cat and prob vectors should be identical. cat (i, f, t, d, b): Entries in the database rows in the cat column cannot be \u201c\u201d , \u201cNA\u201d or NULL (case does not matter). Entries in cat must be a subset of Target.cats from the target definition. prob (f): [0, 1]. Entries in the database rows in the prob column must be numbers in [0, 1]. For one prediction element, the values within prob must sum to 1.0 (values within +/- 0.001 of 1 are acceptable). The data format of cat should correspond or be translatable to the type as in the target definition. NB: Rows for Bin predictions where prob == 0 are not stored in the database. Named Prediction Elements \u00b6 We note that Named predictions currently only support fairly simple distributions. We currently support distributions with up to three parameters. Future versions of Zoltar could support distributions with larger numbers of parameters. If a Named Prediction Element exists, it should have exactly 1 Database Row. family : must be one of the abbreviations shown in the table below. param1 , param2 , param3 (f): The number of param columns with non-NULL entries count must match family definition (see note below). Parameters for each distribution must be within valid ranges, which, if constraints exist, are specified in the table below. For reference, here is the mapping between the generic parameter names and the family-specific use of them (based on predx_classes.md ): Family abbreviation param1 param2 param3 Normal norm mean sd>=0 - LogNormal lnorm mean sd>=0 - Gamma gamma shape>0 rate>0 - Beta beta a>0 b>0 - Poisson pois rate>0 - - Neg.Binom1 nbinom r>0 0<=p<=1 - Neg.Binom2 nbinom2 mean>0 disp>0 - Point Prediction Elements \u00b6 If a Point Prediction Element exists, it should have exactly 1 Database Row for all targets. value (i, f, t, d, b): Entries in the database rows in the value column cannot be \u201c\u201d , \u201cNA\u201d or NULL (case does not matter). The data format of value should correspond or be translatable to the type as in the target definition. Sample Prediction Elements \u00b6 If a Sample Prediction Element exists, it should have >=1 Database Rows. sample (i, f, t, d, b): Entries in the database rows in the sample column cannot be \u201c\u201d , \u201cNA\u201d or NULL (case does not matter). The data format of sample should correspond or be translatable to the type as in the target definition. Quantile Prediction Elements \u00b6 If a Quantile Prediction Element exists, it should have >=1 Database Rows. |quantile| = |value| . The number of elements in the quantile and value vectors should be identical. quantile (f): [0, 1]. Entries in the database rows in the quantile column must be numbers in [0, 1]. quantile s must be unique. value (i, f, d): Entries in value must be non-decreasing as quantiles increase. Entries in value must obey existing ranges for targets. The data format of value should correspond or be translatable to the type as in the target definition. Tests for Predictions by Target Type \u00b6 These tests are performed when a forecast is created or updated. \"continuous\" \u00b6 Within one prediction, there can be at most one of the following prediction elements, but not both: { Named , Bin }. \"discrete\" \u00b6 Within one prediction, there can be at most one of the following prediction elements, but not both: { Named , Bin }. Tests for Prediction Elements by Target Type \u00b6 These tests are performed when a forecast is created or updated. For all target types, only valid Prediction Types are accepted. \"continuous\" \u00b6 any values in Point or Sample Prediction Elements should be numeric if range is specified, any values in Point or Sample Prediction Elements should be contained within range if range is specified, any Named Prediction Element should have negligible probability density (no more than 0.001 density) outside of the range. for Bin Prediction Elements, the submitted set of cat values must be a subset of the cats defined by the target for Named Prediction Elements, the distribution must be one of norm , lnorm , gamma , beta \"discrete\" \u00b6 any values in Point or Sample Prediction Elements should be integers if range is specified, any values in Point or Sample Prediction Elements should be contained within range if range is specified, any Named Prediction Element should have negligible probability density (no more than 0.001 density) outside of the range for Bin Prediction Elements, the submitted set of cat values must be a subset of the cats defined by the target for Named Prediction Elements, the distribution must be one of pois , nbinom , nbinom2 . \"nominal\" \u00b6 any values in Point or Sample Prediction Elements should be contained within the valid set of cats defined by the target for Bin Prediction Elements, the submitted set of cat values must be a subset of the cats defined by the target \"binary\" \u00b6 any values in Point or Sample Prediction Elements should be either true or false . for Bin Prediction Elements, there must be exactly two cat values labeled true and false . These are the two cats that are implied (but not allowed to be specified) by binary target types. \"date\" \u00b6 any values in Point or Sample Prediction Elements should be string that can be interpreted as a date in YYYY-MM-DD format, and these values should be contained within the set of valid responses defined by cats defined by the target. for Bin Prediction Elements, the submitted set of cats must be a subset of the valid outcomes defined by the target range. Tests for target definitions by Target Type \u00b6 These tests are performed when a target is created or updated. \"continuous\" \u00b6 if both range and cats are specified, then the min(cats) must equal the lower bound and max(cats) must be less than the upper bound. if range is specified it must contain two numeric values range lower bound must be smaller than the upper bound. if range is specified, is assumed to be inclusive on the lower bound and open on the upper bound, e.g. [a, b). \"discrete\" \u00b6 if range is specified, it must include two integers. \"nominal\" \u00b6 cats must be a character vector containing a set of unique labels of the categories for this target. The labels must not include \"\" , NA or NULL (case does not matter). \"binary\" \u00b6 none. \"date\" \u00b6 the unit parameter is required to be one of month , week , biweek , or day the date parameter must contain a list of text elements in YYYY-MM-DD format that can be interpreted as dates. Tests for ground truth data tables \u00b6 Please see zoltar-ground-truth-example.csv for an example of a valid specification of ground-truth values. For all ground truth files \u00b6 The columns are timezero , location , target , and value . For every unique target - location - timezero combination, there should be either one or zero rows of truth data. Every value of timezero , target and location must be in the list of valid values defined by the project configuration file. (Note: not every combination needs to exist for the file to be valid.) The value of the truth data cannot be \u201c\u201d , \u201cNA\u201d or NULL (case does not matter). The value of the truth data should be interpretable as the corresponding data_type of the specified target. E.g., for a row corresponding to a date target, the entry must contain a valid ISO-formatted date string. Range-check for ground truth data \u00b6 The following test can be applied to any target with a range . This will always apply to binary , nominal , and date targets, as these targets are required to have sets of valid values specified as part of the target definition. If the range parameter is specified for a continuous or discrete target, then the following test will be applied to that target as well. For binary targets: - The entry in the value column for a specific target - location - timezero combination must be either true or false . For discrete and continuous targets (if range is specified): - The entry in the value column for a specific target - location - timezero combination must be contained within the range of valid values for the target. If cats is specified but range is not, then there is an implicit range for the ground truth value, and that is between min( cats ) and \\infty. For nominal and date target_types: - The entry in the value column for a specific target - location - timezero combination must be contained within the set of valid cats for the target, as defined by the project config file.","title":"Validation"},{"location":"Validation/#forecast-validation","text":"Forecasts stored in Zoltar are validated upon upload based on the expected structure of each forecast. Below, we document the checks and tests that are performed on all forecasts. We first list the test that is performed for every prediction, and after that, tests are broken down by the class of prediction.","title":"Forecast validation"},{"location":"Validation/#definitions","text":"For clarity, we define specific terms that we will use below. Forecast: a collection of data specific to a project > model > timezero. Prediction: a group of a prediction elements(s) specific to a location and target. Prediction Element: data that define a unique single prediction, specific to the class of prediction it is. Prediction Class: data structures representing different types of predictions, e.g. \"Point\" and \"Bin\" (see Data Model for more detail) Target Type: the classification for a specific forecast target, one of \"continuous\", \"discrete\", \"nominal\", \"binary\" or \"date\" (see Targets for more info) Database Row(s): the entry(ies)/row(s) in the database that comprise a prediction element.","title":"Definitions"},{"location":"Validation/#tests-for-all-prediction-elements","text":"These tests are performed when a forecast is created or updated. The Prediction's class must be valid for its target's type (see Valid prediction types by target type . Within a Prediction, there cannot be more than 1 Prediction Element of the same class.","title":"Tests for all Prediction Elements"},{"location":"Validation/#tests-for-prediction-elements-by-prediction-class","text":"These tests are performed when a forecast is created or updated.","title":"Tests for Prediction Elements by Prediction Class"},{"location":"Validation/#bin-prediction-elements","text":"If a Bin Prediction Element exists, it should have >=1 Database Rows. |cat| = |prob| . The number of elements in the cat and prob vectors should be identical. cat (i, f, t, d, b): Entries in the database rows in the cat column cannot be \u201c\u201d , \u201cNA\u201d or NULL (case does not matter). Entries in cat must be a subset of Target.cats from the target definition. prob (f): [0, 1]. Entries in the database rows in the prob column must be numbers in [0, 1]. For one prediction element, the values within prob must sum to 1.0 (values within +/- 0.001 of 1 are acceptable). The data format of cat should correspond or be translatable to the type as in the target definition. NB: Rows for Bin predictions where prob == 0 are not stored in the database.","title":"Bin Prediction Elements"},{"location":"Validation/#named-prediction-elements","text":"We note that Named predictions currently only support fairly simple distributions. We currently support distributions with up to three parameters. Future versions of Zoltar could support distributions with larger numbers of parameters. If a Named Prediction Element exists, it should have exactly 1 Database Row. family : must be one of the abbreviations shown in the table below. param1 , param2 , param3 (f): The number of param columns with non-NULL entries count must match family definition (see note below). Parameters for each distribution must be within valid ranges, which, if constraints exist, are specified in the table below. For reference, here is the mapping between the generic parameter names and the family-specific use of them (based on predx_classes.md ): Family abbreviation param1 param2 param3 Normal norm mean sd>=0 - LogNormal lnorm mean sd>=0 - Gamma gamma shape>0 rate>0 - Beta beta a>0 b>0 - Poisson pois rate>0 - - Neg.Binom1 nbinom r>0 0<=p<=1 - Neg.Binom2 nbinom2 mean>0 disp>0 -","title":"Named Prediction Elements"},{"location":"Validation/#point-prediction-elements","text":"If a Point Prediction Element exists, it should have exactly 1 Database Row for all targets. value (i, f, t, d, b): Entries in the database rows in the value column cannot be \u201c\u201d , \u201cNA\u201d or NULL (case does not matter). The data format of value should correspond or be translatable to the type as in the target definition.","title":"Point Prediction Elements"},{"location":"Validation/#sample-prediction-elements","text":"If a Sample Prediction Element exists, it should have >=1 Database Rows. sample (i, f, t, d, b): Entries in the database rows in the sample column cannot be \u201c\u201d , \u201cNA\u201d or NULL (case does not matter). The data format of sample should correspond or be translatable to the type as in the target definition.","title":"Sample Prediction Elements"},{"location":"Validation/#quantile-prediction-elements","text":"If a Quantile Prediction Element exists, it should have >=1 Database Rows. |quantile| = |value| . The number of elements in the quantile and value vectors should be identical. quantile (f): [0, 1]. Entries in the database rows in the quantile column must be numbers in [0, 1]. quantile s must be unique. value (i, f, d): Entries in value must be non-decreasing as quantiles increase. Entries in value must obey existing ranges for targets. The data format of value should correspond or be translatable to the type as in the target definition.","title":"Quantile Prediction Elements"},{"location":"Validation/#tests-for-predictions-by-target-type","text":"These tests are performed when a forecast is created or updated.","title":"Tests for Predictions by Target Type"},{"location":"Validation/#continuous","text":"Within one prediction, there can be at most one of the following prediction elements, but not both: { Named , Bin }.","title":"\"continuous\""},{"location":"Validation/#discrete","text":"Within one prediction, there can be at most one of the following prediction elements, but not both: { Named , Bin }.","title":"\"discrete\""},{"location":"Validation/#tests-for-prediction-elements-by-target-type","text":"These tests are performed when a forecast is created or updated. For all target types, only valid Prediction Types are accepted.","title":"Tests for Prediction Elements by Target Type"},{"location":"Validation/#continuous_1","text":"any values in Point or Sample Prediction Elements should be numeric if range is specified, any values in Point or Sample Prediction Elements should be contained within range if range is specified, any Named Prediction Element should have negligible probability density (no more than 0.001 density) outside of the range. for Bin Prediction Elements, the submitted set of cat values must be a subset of the cats defined by the target for Named Prediction Elements, the distribution must be one of norm , lnorm , gamma , beta","title":"\"continuous\""},{"location":"Validation/#discrete_1","text":"any values in Point or Sample Prediction Elements should be integers if range is specified, any values in Point or Sample Prediction Elements should be contained within range if range is specified, any Named Prediction Element should have negligible probability density (no more than 0.001 density) outside of the range for Bin Prediction Elements, the submitted set of cat values must be a subset of the cats defined by the target for Named Prediction Elements, the distribution must be one of pois , nbinom , nbinom2 .","title":"\"discrete\""},{"location":"Validation/#nominal","text":"any values in Point or Sample Prediction Elements should be contained within the valid set of cats defined by the target for Bin Prediction Elements, the submitted set of cat values must be a subset of the cats defined by the target","title":"\"nominal\""},{"location":"Validation/#binary","text":"any values in Point or Sample Prediction Elements should be either true or false . for Bin Prediction Elements, there must be exactly two cat values labeled true and false . These are the two cats that are implied (but not allowed to be specified) by binary target types.","title":"\"binary\""},{"location":"Validation/#date","text":"any values in Point or Sample Prediction Elements should be string that can be interpreted as a date in YYYY-MM-DD format, and these values should be contained within the set of valid responses defined by cats defined by the target. for Bin Prediction Elements, the submitted set of cats must be a subset of the valid outcomes defined by the target range.","title":"\"date\""},{"location":"Validation/#tests-for-target-definitions-by-target-type","text":"These tests are performed when a target is created or updated.","title":"Tests for target definitions by Target Type"},{"location":"Validation/#continuous_2","text":"if both range and cats are specified, then the min(cats) must equal the lower bound and max(cats) must be less than the upper bound. if range is specified it must contain two numeric values range lower bound must be smaller than the upper bound. if range is specified, is assumed to be inclusive on the lower bound and open on the upper bound, e.g. [a, b).","title":"\"continuous\""},{"location":"Validation/#discrete_2","text":"if range is specified, it must include two integers.","title":"\"discrete\""},{"location":"Validation/#nominal_1","text":"cats must be a character vector containing a set of unique labels of the categories for this target. The labels must not include \"\" , NA or NULL (case does not matter).","title":"\"nominal\""},{"location":"Validation/#binary_1","text":"none.","title":"\"binary\""},{"location":"Validation/#date_1","text":"the unit parameter is required to be one of month , week , biweek , or day the date parameter must contain a list of text elements in YYYY-MM-DD format that can be interpreted as dates.","title":"\"date\""},{"location":"Validation/#tests-for-ground-truth-data-tables","text":"Please see zoltar-ground-truth-example.csv for an example of a valid specification of ground-truth values.","title":"Tests for ground truth data tables"},{"location":"Validation/#for-all-ground-truth-files","text":"The columns are timezero , location , target , and value . For every unique target - location - timezero combination, there should be either one or zero rows of truth data. Every value of timezero , target and location must be in the list of valid values defined by the project configuration file. (Note: not every combination needs to exist for the file to be valid.) The value of the truth data cannot be \u201c\u201d , \u201cNA\u201d or NULL (case does not matter). The value of the truth data should be interpretable as the corresponding data_type of the specified target. E.g., for a row corresponding to a date target, the entry must contain a valid ISO-formatted date string.","title":"For all ground truth files"},{"location":"Validation/#range-check-for-ground-truth-data","text":"The following test can be applied to any target with a range . This will always apply to binary , nominal , and date targets, as these targets are required to have sets of valid values specified as part of the target definition. If the range parameter is specified for a continuous or discrete target, then the following test will be applied to that target as well. For binary targets: - The entry in the value column for a specific target - location - timezero combination must be either true or false . For discrete and continuous targets (if range is specified): - The entry in the value column for a specific target - location - timezero combination must be contained within the range of valid values for the target. If cats is specified but range is not, then there is an implicit range for the ground truth value, and that is between min( cats ) and \\infty. For nominal and date target_types: - The entry in the value column for a specific target - location - timezero combination must be contained within the set of valid cats for the target, as defined by the project config file.","title":"Range-check for ground truth data"},{"location":"WebTourIntro/","text":"This file takes you through a tour of Zoltar's web interface, located at zoltardata.com . Start the tour by following the links in the navigation menu on the left, ideally in order. You can also use the Previous and Next buttons at the bottom of this page.","title":"Introduction"},{"location":"Zoltpy/","text":"Zoltpy is a Python module that contains functions for working with the Zoltar forecast repository\u2019s API, including projects, models, forecasts, and truth. The source is at github.com/reichlab/zoltpy (it is not yet on PyPI).","title":"zoltpy (Python)"},{"location":"Zoltr/","text":"Zoltr is an R package that contains functions for working with the Zoltar forecast repository\u2019s API, including projects, models, forecasts, and truth. Documentation for the package is at the zoltr pkgdown site . It is available as a CRAN package , though we recommend you download the development version because we are regularly adding features that aren't yet in CRAN: install.packages(\"devtools\") devtools::install_github(\"reichlab/zoltr\") The source is at github.com/reichlab/zoltr where the latest version can be installed.","title":"zoltr (R)"}]}